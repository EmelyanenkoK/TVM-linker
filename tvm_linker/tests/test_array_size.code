
.globl	main_external
.type	main_external, @function
LDU 16
DROP
PUSHINT $main$
CALL 1

.globl	main
.type	main, @function
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main
;; param: required_len
;; tvm_init_storage
;; stack=1
NEWDICT
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 0
SWAP
PUSHINT 2
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 1
SWAP
PUSHINT 3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 2
SWAP
PUSHINT 3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 3
SWAP
PUSHINT 3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 4
SWAP
PUSHINT 3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 5
SWAP
PUSHINT 3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; fetch arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 6
SWAP
PUSHINT 3
NEWC STU 256 ENDC CTOS
ROTREV
PUSHINT 32
DICTUSET
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; arr
;; stack=1
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
;; required_len
;; stack=2
PUSH s1
;; get member length
;; arr
;; stack=3
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
PUSHINT $change_array_length$
CALL 1
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; arr
;; stack=1
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 6
;; index
SWAP
PUSHINT 32
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
PUSHINT 0
;; ==
EQUAL
;; require
;; stack=2
THROWIFNOT 100
;; arr
;; stack=1
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
;; required_len
;; stack=2
PUSH s1
PUSHINT 10
;; +
ADD
;; get member length
;; arr
;; stack=3
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
PUSHINT $change_array_length$
CALL 1
;; assign arr
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUSET
NEWC STSLICE ENDC
POPROOT
;; arr
;; stack=1
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
;; required_len
;; stack=2
PUSH s1
PUSHINT 10
;; +
ADD
PUSHINT 1
;; -
SUB
;; index
SWAP
PUSHINT 32
DICTUGET
PUSHCONT { LDU 256 ENDS }
PUSHCONT { PUSHINT 0 }
IFELSE
PUSHINT 0
;; ==
EQUAL
;; require
;; stack=2
THROWIFNOT 100
;; get member length
;; arr
;; stack=1
PUSHINT 0
PUSHROOT CTOS
PUSHINT 256
DICTUGET
PUSHCONT { NEWDICT }
IFNOT
PUSHINT 32
DICTUMAX
PUSHCONT { POP s1 INC }
PUSHCONT { PUSHINT 0 }
IFELSE
;; return
POP s1
RET
