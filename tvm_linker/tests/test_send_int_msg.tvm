;;;;
;; ./target/debug/tvm_linker --lib stdlib.tvm ./tests/test_send_int_msg.tvm test --body 000D6E4079

	.globl main
	
	PUSHINT 0 			;; next msg logical time
	NEWC ENDC CTOS		;; body: slice
	PUSHINT 127 		;; dst account address: integer
	PUSHINT 1000		;; transfer grams value: integer
	
	PUSHINT $sendIntMsg$
	CALL 1
	
	PUSH c6
	RET
	

		;; taken from TON-Wallet
	.globl	sendIntMsg
					;args: 
					; s0 - transfer grams value: integer
					; s1 - dst account address: integer
					; s2 - body: slice
					; s3 - next msg logical time
					;ret: none

					SWAP
					
			;args: s0 - address: integer u256
			;ret: s0 - slice
				NEWC
				;tag$10 + $0 (anycast is NULL) + $00000000 (workchain_id 0i8)
				STSLICECONST x801_
				STU 256
				ENDC
				CTOS


					; load SmartContractInfo 
					PUSHCTR c5
					CTOS
					LDREFRTOS
					NIP
					
					PUSHINT 64 ; 32 + 16 + 16
					SDSKIPFIRST ; skip tag + actions + msgs_sent
					LDU 32      ; unixtime
					PUSHINT 128
					SDSKIPFIRST ; skip block_lt + trans_lt 
					PUSH s5     ; push msg lt
					SWAP        
					PUSHINT 256
					SDSKIPFIRST ; skip rand_seed

					
				PUSHCONT {
				;parses CurrencyCollection type
				;args: s0 - slice
				;ret:
				;   s0 - remaining slice
				;   s1 - grams: slice
					
			PUSHCONT {
				;parses Grams type (VarInteger 16)
				;args: s0 - slice
				; ret:
				;   s0 - remaining slice
				;   s1 - grams: slice
				;starts with 4bit length field 
				LDU 4
				SWAP
				DUP
				; load 'value' len*8 bits if len != 0, otherwise 0
				PUSHCONT {
					PUSHINT 8
					MUL
					LDUX
					SWAP
				}
				PUSHCONT {
					DROP
					PUSHINT 0
				}
				IFELSE
				;restore it as u128 integer 
				NEWC
				STU 128
				ENDC
				CTOS
				SWAP
			}

					CALLX
					; skip HashmapE with currencies.
					SKIPDICT
				}
				
					CALLX

					NIP
					; s0 - myself: MsgAddressInt (slice) 
					; s1 - trans_lt: u64
					; s2 - tr unixtime: u32
					; s3 - transfer grams value: integer
					; s4 - dst account address: integer
					; s5 - body: slice
					ROTREV
					PUSHINT 0   ; fwd_fee
					PUSHINT 0   ; ihr_fee
					BLKSWAP 3, 4

					;stack trace:
					; s0 - myself: MsgAddressInt (slice) 
					; s1 - dst account address: integer
					; s2 - transfer grams value: integer
					; s3 - ihr_fee
					; s4 - fwd_fee
					; s5 - trans_lt: u64
					; s6 - tr unixtime: u32
					; s7 - body: slice

					PUSHINT 1   ; bounce flag
					PUSHINT 0   ; reset ihr_disabled flag
					
				PUSHCONT {
				; build internal outbound message
				; s0 - ihr_disabled: integer (1 or 0)
				; s1 - bounce: integer (1 or 0)
				; s2 - src address : slice (MsgAddressInt)
				; s3 - dst address : slice (MsgAddressInt)
				; s4 - value: integer
				; s5 - ihr_fee: integer
				; s6 - fwd_fee: integer
				; s7 - logical time: integer (u64)
				; s8 - unixtime: integer (u32)
				; s9 - body: slice
				; returns: msg: cell

					NEWC
					STSLICECONST 0 ; int_msg_info$0
					STU 1 ; ihr_disabled
					STU 1 ; bounce
					STSLICE
					STSLICE
					SWAP
					
				;s0 - value: integer (u64)
				;s1 - builder
				
				;s0 - value: integer (u64)
				;s1 - builder
				DUP
				PUSHCONT {
					DUP
					UBITSIZE     ; bit count used by integer 
					PUSHINT 8   
					DIVC        ; calculate number of bytes needed for integer
					DUP
					PUSH s3     ; push builder
					STU 4       ; store len (bytes)
					SWAP        
					PUSHINT 8   
					MUL         ; calculate bits for integer (rounded to byte)
					STUX        ; store value
					NIP
				}
				PUSHCONT {
					DROP
					PUSHINT 0
					STUR 4
				}
				IFELSE

				STSLICECONST 0
				
					SWAP
					
				;s0 - value: integer (u64)
				;s1 - builder
				DUP
				PUSHCONT {
					DUP
					UBITSIZE     ; bit count used by integer 
					PUSHINT 8   
					DIVC        ; calculate number of bytes needed for integer
					DUP
					PUSH s3     ; push builder
					STU 4       ; store len (bytes)
					SWAP        
					PUSHINT 8   
					MUL         ; calculate bits for integer (rounded to byte)
					STUX        ; store value
					NIP
				}
				PUSHCONT {
					DROP
					PUSHINT 0
					STUR 4
				}
				IFELSE
			 ; store ihr_fee
					SWAP
					
				;s0 - value: integer (u64)
				;s1 - builder
				DUP
				PUSHCONT {
					DUP
					UBITSIZE     ; bit count used by integer 
					PUSHINT 8   
					DIVC        ; calculate number of bytes needed for integer
					DUP
					PUSH s3     ; push builder
					STU 4       ; store len (bytes)
					SWAP        
					PUSHINT 8   
					MUL         ; calculate bits for integer (rounded to byte)
					STUX        ; store value
					NIP
				}
				PUSHCONT {
					DROP
					PUSHINT 0
					STUR 4
				}
				IFELSE
			 ; store fwd_fee
					STU 64        ; store logical time
					STU 32        ; store unixtime
					
					STSLICECONST 0 ; (Maybe StateInit) to 0bit
					STSLICECONST 0 ; (body Either) to left$0
					STSLICE       ; store body
					ENDC
				}
				
					CALLX
					PUSHINT 0
					SENDRAWMSG
	