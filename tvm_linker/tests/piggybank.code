	.text
	.file	"my.c"
	.globl	constructor_Impl        ; -- Begin function constructor_Impl
	.p2align	1
	.type	constructor_Impl,@function
constructor_Impl:                       ; @constructor_Impl
; %bb.0:                                ; %entry
                                        ; { - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end0:
	.size	constructor_Impl, .Lfunc_end0-constructor_Impl
                                        ; -- End function
	.globl	initialize_target_Impl  ; -- Begin function initialize_target_Impl
	.p2align	1
	.type	initialize_target_Impl,@function
initialize_target_Impl:                 ; @initialize_target_Impl
; %bb.0:                                ; %entry
                                        ; { %5 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %5 | %0 | - }
	PUSHINT	$target_persistent$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @target_persistent
                                        ; { %5 | %0 | %1 | - }
	DUP                             ; { %5 | %0 | %1 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %5 | %0 | %1 | %2 | - }
	PUSHINT	18446744073709551615    ; >%10 = CONST_U64 -1
                                        ; { %5 | %0 | %1 | %2 | %10 | - }
	AND                             ; >%4 = AND %2, %10
                                        ; { %5 | %0 | %1 | %4 | - }
	PUSHINT	18446744073709551615    ; >%11 = CONST_U64 -1
                                        ; { %5 | %0 | %1 | %4 | %11 | - }
	PUSH	s4                      ; { %5 | %0 | %1 | %4 | %11 | %5 | - }
	SWAP                            ; { %5 | %0 | %1 | %4 | %5 | %11 | - }
	AND                             ; >%6 = AND %5, %11
                                        ; { %5 | %0 | %1 | %4 | %6 | - }
	LEQ                             ; >%7 = SLE %4, %6
                                        ; { %5 | %0 | %1 | %7 | - }
	PUSHINT	1                       ; >%12 = CONST_I64 1
                                        ; { %5 | %0 | %1 | %7 | %12 | - }
	AND                             ; >%9 = AND %7, %12
                                        ; { %5 | %0 | %1 | %9 | - }
	THROWIF	62                      ; { %5 | %0 | %1 | - }
	XCHG2	s0, s2                  ; { %0 | %1 | %5 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end1:
	.size	initialize_target_Impl, .Lfunc_end1-initialize_target_Impl
                                        ; -- End function
	.globl	transfer_Impl           ; -- Begin function transfer_Impl
	.p2align	1
	.type	transfer_Impl,@function
transfer_Impl:                          ; @transfer_Impl
; %bb.0:                                ; %entry
                                        ; { %8 | - }
	PUSHINT	264                     ; >%97 = CONST_I64 264
                                        ; { %8 | %97 | - }
	CALL	$:enter$                ; { %8 | - }
	PUSH	c0                      ; >%7 = PUSHC 0
                                        ; { %8 | %7 | - }
	PUSHINT	$tonstdlib_get_smart_contract_info$
	                                ; >%9 = PUSH_GLOBAL_ADDRESS @tonstdlib_get_smart_contract_info
                                        ; { %8 | %7 | %9 | - }
	CALL	1                       ; { %8 | %7 | - }
	PUSHINT	$Deserialize_SmartContractInfo_Impl$
	                                ; >%10 = PUSH_GLOBAL_ADDRESS @Deserialize_SmartContractInfo_Impl
                                        ; { %8 | %7 | %10 | - }
	PUSHINT	168                     ; >%98 = CONST_I64 168
                                        ; { %8 | %7 | %10 | %98 | - }
	CALL	$:frameidx$             ; >%64 = CALL_FRAMEIDX %98
                                        ; { %8 | %7 | %10 | %64 | - }
	SWAP                            ; { %8 | %7 | %64 | %10 | - }
	CALL	1                       ; { %8 | %7 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%11 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %8 | %7 | %11 | - }
	DUP                             ; { %8 | %7 | %11 | %11 | - }
	CALL	1                       ; { %8 | %7 | %11 | - }
	PUSHINT	$target_persistent$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @target_persistent
                                        ; { %8 | %7 | %11 | %12 | - }
	CALL	$:load$                 ; >%13 = CALL_LOAD %12
                                        ; { %8 | %7 | %11 | %13 | - }
	PUSHINT	168                     ; >%99 = CONST_I64 168
                                        ; { %8 | %7 | %11 | %13 | %99 | - }
	CALL	$:frameidx$             ; >%66 = CALL_FRAMEIDX %99
                                        ; { %8 | %7 | %11 | %13 | %66 | - }
	ADDCONST	56              ; >%14 = ADDCONST %66, 56
                                        ; { %8 | %7 | %11 | %13 | %14 | - }
	CALL	$:load$                 ; >%15 = CALL_LOAD %14
                                        ; { %8 | %7 | %11 | %13 | %15 | - }
	PUXC	s0, s1                  ; { %8 | %7 | %11 | %15 | %15 | %13 | - }
	LESS                            ; >%16 = SLT %15, %13
                                        ; { %8 | %7 | %11 | %15 | %16 | - }
	PUSHINT	1                       ; >%100 = CONST_I64 1
                                        ; { %8 | %7 | %11 | %15 | %16 | %100 | - }
	AND                             ; >%18 = AND %16, %100
                                        ; { %8 | %7 | %11 | %15 | %18 | - }
	THROWIF	61                      ; { %8 | %7 | %11 | %15 | - }
	PUSHINT	-10000000               ; >%101 = CONST_I64 -10000000
                                        ; { %8 | %7 | %11 | %15 | %101 | - }
	ADD                             ; >%1 = ADD %15, %101
                                        ; { %8 | %7 | %11 | %1 | - }
	PUSHINT	168                     ; >%102 = CONST_I64 168
                                        ; { %8 | %7 | %11 | %1 | %102 | - }
	CALL	$:frameidx$             ; >%68 = CALL_FRAMEIDX %102
                                        ; { %8 | %7 | %11 | %1 | %68 | - }
	PUSHINT	0                       ; >%0 = REG_TO_REG_COPY %68
                                        ; { %8 | %7 | %11 | %1 | x | - }
                                        ; >%58 = CONST_I64 0
                                        ; { %8 | %7 | %11 | %1 | x | %58 | - }
	PUSHINT	0                       ; >%103 = CONST_I64 0
                                        ; { %8 | %7 | %11 | %1 | x | %58 | %103 | - }
	PUSH	s3                      ; { %8 | %7 | %11 | %1 | x | %58 | %103 | %1 | - }
	SWAP                            ; { %8 | %7 | %11 | %1 | x | %58 | %1 | %103 | - }
	NEQ                             ; >%21 = NE %1, %103
                                        ; { %8 | %7 | %11 | %1 | x | %58 | %21 | - }
	PUSHCONT                        ; >%22 = PUSHCONT_MBB %bb.6, 0
                                        ; { %8 | %7 | %11 | %1 | x | %58 | %21 | %22 | - }
	{
; %bb.6:                                ; %entry.build_internal_message.exit.cleanup
                                        ; { %1 | %7 | %8 | %11 | %57 | %58 | - }
	  SWAP                          ; { %1 | %7 | %8 | %11 | %58 | %57 | - }
	  JMPX                          ; { %1 | %7 | %8 | %11 | %58 | %57 | - } => { %1 | %7 | %8 | %11 | %58 | - }
	}
	PUSHCONT                        ; >%23 = PUSHCONT_MBB %bb.4, 0
                                        ; { %8 | %7 | %11 | %1 | x | %58 | %21 | %22 | %23 | - }
	{
; %bb.4:                                ; %entry.while.body.i.i.cleanup
                                        ; { %1 | %7 | %8 | %11 | %57 | x | - }
	  PUSHCONT
	  {
; %bb.1:                                ; %while.body.i.i
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | - }
	    PUSHINT	18446744073709551615 ; >%104 = CONST_U64 -1
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %104 | - }
	    AND                         ; >%29 = AND %59, %104
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %29 | - }
	    SWAP                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %29 | %58 | - }
	    INC                         ; >%58 = INC %58
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %29 | %58 | - }
	    SWAP                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %29 | - }
	    RSHIFT	8               ; >%59 = SHRCONST %29, 8
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | - }
	    PUSHINT	0               ; >%105 = CONST_I64 0
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %105 | - }
	    PUSH	s1              ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %105 | %59 | - }
	    SWAP                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %59 | %105 | - }
	    NEQ                         ; >%31 = NE %59, %105
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %31 | - }
	    PUSHCONT
	    {
; %bb.5:                                ; %while.body.i.i.build_internal_message.exit.cleanup
                                        ; { %1 | %7 | %8 | %11 | x | %57 | %58 | x | - }
	      DROP                      ; { %1 | %7 | %8 | %11 | x | %57 | %58 | - }
	      ROLL	2               ; { %1 | %7 | %8 | %11 | %57 | %58 | x | - }
	      DROP                      ; { %1 | %7 | %8 | %11 | %57 | %58 | - }
	      SWAP                      ; { %1 | %7 | %8 | %11 | %58 | %57 | - }
	      JMPX                      ; { %1 | %7 | %8 | %11 | %58 | %57 | - } => { %1 | %7 | %8 | %11 | %58 | - }
	    }                           ; >%32 = PUSHCONT_MBB %bb.5, 0
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %31 | %32 | - }
	    PUSHCONT
	    {
; %bb.3:                                ; %while.body.i.i.while.body.i.i.cleanup
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | - }
	      PUSH	s3              ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %27 | - }
	      JMPX                      ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %27 | - } => { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | - }
	    }                           ; >%33 = PUSHCONT_MBB %bb.3, 0
                                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %31 | %32 | %33 | - }
	    SWAP                        ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %31 | %33 | %32 | - }
	    IFELSE                      ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %31 | %33 | %32 | - } => { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | - }
	  }                             ; >%27 = PUSHCONT_MBB %bb.1, 0
                                        ; { %1 | %7 | %8 | %11 | %57 | x | %27 | - }
	  PUSHINT	0               ; >%58 = CONST_I64 0
                                        ; { %1 | %7 | %8 | %11 | %57 | x | %27 | %58 | - }
	  PUSH	s7                      ; { %1 | %7 | %8 | %11 | %57 | x | %27 | %58 | %1 | - }
	                                ; >%59 = REG_TO_REG_COPY %1
                                        ; { %1 | %7 | %8 | %11 | %57 | x | %27 | %58 | %59 | - }
	  ROLL	3                       ; { %1 | %7 | %8 | %11 | %57 | %27 | %58 | %59 | x | - }
	  DROP                          ; { %1 | %7 | %8 | %11 | %57 | %27 | %58 | %59 | - }
	  PUSH	s2                      ; { %1 | %7 | %8 | %11 | %57 | %27 | %58 | %59 | %27 | - }
	  BLKSWAP	2, 3            ; { %1 | %7 | %8 | %11 | %58 | %59 | %27 | %57 | %27 | - }
	  SWAP                          ; { %1 | %7 | %8 | %11 | %58 | %59 | %27 | %27 | %57 | - }
	  BLKSWAP	3, 2            ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %27 | - }
	  JMPX                          ; { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | %27 | - } => { %1 | %7 | %8 | %11 | %27 | %57 | %58 | %59 | - }
	}
	PUSHCONT                        ; >%57 = PUSHCONT_MBB %bb.2, 0
                                        ; { %8 | %7 | %11 | %1 | x | %58 | %21 | %22 | %23 | %57 | - }
	{
; %bb.2:                                ; %build_internal_message.exit
                                        ; { %1 | %7 | %8 | %11 | %58 | - }
	  PUSHINT	0               ; >%106 = CONST_I64 0
                                        ; { %1 | %7 | %8 | %11 | %58 | %106 | - }
	  CALL	$:frameidx$             ; >%70 = CALL_FRAMEIDX %106
                                        ; { %1 | %7 | %8 | %11 | %58 | %70 | - }
	  ADDCONST	48              ; >%35 = ADDCONST %70, 48
                                        ; { %1 | %7 | %8 | %11 | %58 | %35 | - }
	  PUSH	s3                      ; { %1 | %7 | %8 | %11 | %58 | %35 | %8 | - }
	  CALL	$:store$                ; { %1 | %7 | %8 | %11 | %58 | - }
	  PUSHINT	0               ; >%107 = CONST_I64 0
                                        ; { %1 | %7 | %8 | %11 | %58 | %107 | - }
	  CALL	$:frameidx$             ; >%72 = CALL_FRAMEIDX %107
                                        ; { %1 | %7 | %8 | %11 | %58 | %72 | - }
	  ADDCONST	72              ; >%36 = ADDCONST %72, 72
                                        ; { %1 | %7 | %8 | %11 | %58 | %36 | - }
	  XCHG2	s0, s3                  ; { %1 | %7 | %58 | %11 | %36 | %8 | - }
	  CALL	$:store$                ; { %1 | %7 | %58 | %11 | - }
	  PUSHINT	0               ; >%108 = CONST_I64 0
                                        ; { %1 | %7 | %58 | %11 | %108 | - }
	  CALL	$:frameidx$             ; >%74 = CALL_FRAMEIDX %108
                                        ; { %1 | %7 | %58 | %11 | %74 | - }
	  ADDCONST	80              ; >%37 = ADDCONST %74, 80
                                        ; { %1 | %7 | %58 | %11 | %37 | - }
	  XCHG2	s0, s2                  ; { %1 | %7 | %11 | %37 | %58 | - }
	  CALL	$:store$                ; { %1 | %7 | %11 | - }
	  PUSHINT	0               ; >%109 = CONST_I64 0
                                        ; { %1 | %7 | %11 | %109 | - }
	  CALL	$:frameidx$             ; >%76 = CALL_FRAMEIDX %109
                                        ; { %1 | %7 | %11 | %76 | - }
	  ADDCONST	88              ; >%38 = ADDCONST %76, 88
                                        ; { %1 | %7 | %11 | %38 | - }
	  XCHG2	s0, s3                  ; { %11 | %7 | %38 | %1 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%110 = CONST_I64 0
                                        ; { %11 | %7 | %110 | - }
	  CALL	$:frameidx$             ; >%78 = CALL_FRAMEIDX %110
                                        ; { %11 | %7 | %78 | - }
	  ADDCONST	40              ; >%40 = ADDCONST %78, 40
                                        ; { %11 | %7 | %40 | - }
	  PUSHINT	0               ; >%111 = CONST_I64 0
                                        ; { %11 | %7 | %40 | %111 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%112 = CONST_I64 0
                                        ; { %11 | %7 | %112 | - }
	  CALL	$:frameidx$             ; >%80 = CALL_FRAMEIDX %112
                                        ; { %11 | %7 | %80 | - }
	  ADDCONST	32              ; >%41 = ADDCONST %80, 32
                                        ; { %11 | %7 | %41 | - }
	  PUSHINT	0               ; >%113 = CONST_I64 0
                                        ; { %11 | %7 | %41 | %113 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%114 = CONST_I64 0
                                        ; { %11 | %7 | %114 | - }
	  CALL	$:frameidx$             ; >%82 = CALL_FRAMEIDX %114
                                        ; { %11 | %7 | %82 | - }
	  ADDCONST	24              ; >%42 = ADDCONST %82, 24
                                        ; { %11 | %7 | %42 | - }
	  PUSHINT	0               ; >%115 = CONST_I64 0
                                        ; { %11 | %7 | %42 | %115 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%116 = CONST_I64 0
                                        ; { %11 | %7 | %116 | - }
	  CALL	$:frameidx$             ; >%84 = CALL_FRAMEIDX %116
                                        ; { %11 | %7 | %84 | - }
	  ADDCONST	16              ; >%43 = ADDCONST %84, 16
                                        ; { %11 | %7 | %43 | - }
	  PUSHINT	0               ; >%117 = CONST_I64 0
                                        ; { %11 | %7 | %43 | %117 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%118 = CONST_I64 0
                                        ; { %11 | %7 | %118 | - }
	  CALL	$:frameidx$             ; >%86 = CALL_FRAMEIDX %118
                                        ; { %11 | %7 | %86 | - }
	  ADDCONST	8               ; >%44 = ADDCONST %86, 8
                                        ; { %11 | %7 | %44 | - }
	  PUSHINT	0               ; >%119 = CONST_I64 0
                                        ; { %11 | %7 | %44 | %119 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%120 = CONST_I64 0
                                        ; { %11 | %7 | %120 | - }
	  CALL	$:frameidx$             ; >%88 = CALL_FRAMEIDX %120
                                        ; { %11 | %7 | %88 | - }
	  ADDCONST	64              ; >%45 = ADDCONST %88, 64
                                        ; { %11 | %7 | %45 | - }
	  PUSHINT	0               ; >%121 = CONST_I64 0
                                        ; { %11 | %7 | %45 | %121 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%122 = CONST_I64 0
                                        ; { %11 | %7 | %122 | - }
	  CALL	$:frameidx$             ; >%90 = CALL_FRAMEIDX %122
                                        ; { %11 | %7 | %90 | - }
	  ADDCONST	56              ; >%46 = ADDCONST %90, 56
                                        ; { %11 | %7 | %46 | - }
	  PUSHINT	0               ; >%123 = CONST_I64 0
                                        ; { %11 | %7 | %46 | %123 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	0               ; >%124 = CONST_I64 0
                                        ; { %11 | %7 | %124 | - }
	  CALL	$:frameidx$             ; >%92 = CALL_FRAMEIDX %124
                                        ; { %11 | %7 | %92 | - }
	  PUSHINT	0               ; >%125 = CONST_I64 0
                                        ; { %11 | %7 | %92 | %125 | - }
	  CALL	$:store$                ; { %11 | %7 | - }
	  PUSHINT	$memset$
	                                ; >%47 = PUSH_GLOBAL_ADDRESS target-flags(<unknown>) &memset
                                        ; { %11 | %7 | %47 | - }
	  PUSHINT	0               ; >%126 = CONST_I64 0
                                        ; { %11 | %7 | %47 | %126 | - }
	  CALL	$:frameidx$             ; >%94 = CALL_FRAMEIDX %126
                                        ; { %11 | %7 | %47 | %94 | - }
	  ADDCONST	96              ; >%49 = ADDCONST %94, 96
                                        ; { %11 | %7 | %47 | %49 | - }
	  PUSHINT	0               ; >%127 = CONST_I64 0
                                        ; { %11 | %7 | %47 | %49 | %127 | - }
	  PUSHINT	72              ; >%128 = CONST_I64 72
                                        ; { %11 | %7 | %47 | %49 | %127 | %128 | - }
	  ROLL	2                       ; { %11 | %7 | %47 | %127 | %128 | %49 | - }
	  ROLL	2                       ; { %11 | %7 | %47 | %128 | %49 | %127 | - }
	  ROLL	2                       ; { %11 | %7 | %47 | %49 | %127 | %128 | - }
	  ROLL	3                       ; { %11 | %7 | %49 | %127 | %128 | %47 | - }
	  CALL	1                       ; >%50 = CALL_1 %49, %127, %128, %47
                                        ; { %11 | %7 | x | - }
	  DROP                          ; { %11 | %7 | - }
	  SWAP                          ; { %7 | %11 | - }
	  CALL	1                       ; { %7 | - }
	  PUSHINT	$Serialize_CommonMsgInfo_Impl$
	                                ; >%52 = PUSH_GLOBAL_ADDRESS @Serialize_CommonMsgInfo_Impl
                                        ; { %7 | %52 | - }
	  PUSHINT	0               ; >%129 = CONST_I64 0
                                        ; { %7 | %52 | %129 | - }
	  CALL	$:frameidx$             ; >%96 = CALL_FRAMEIDX %129
                                        ; { %7 | %52 | %96 | - }
	  SWAP                          ; { %7 | %96 | %52 | - }
	  CALL	1                       ; { %7 | - }
	  PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%53 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %7 | %53 | - }
	  PUSHINT	0               ; >%130 = CONST_I64 0
                                        ; { %7 | %53 | %130 | - }
	  PUSHINT	1               ; >%131 = CONST_I64 1
                                        ; { %7 | %53 | %130 | %131 | - }
	  BLKSWAP	1, 2            ; { %7 | %130 | %131 | %53 | - }
	  CALL	1                       ; { %7 | - }
	  PUSHINT	$tonstdlib_send_work_slice_as_rawmsg$
	                                ; >%55 = PUSH_GLOBAL_ADDRESS @tonstdlib_send_work_slice_as_rawmsg
                                        ; { %7 | %55 | - }
	  PUSHINT	0               ; >%132 = CONST_I64 0
                                        ; { %7 | %55 | %132 | - }
	  SWAP                          ; { %7 | %132 | %55 | - }
	  CALL	1                       ; { %7 | - }
	  POP	c0                      ; { - }
	  PUSHINT	264             ; >%133 = CONST_I64 264
                                        ; { %133 | - }
	  CALL	$:leave$                ; { - }
                                        ; fallthrough return
	  
	}
	ROLL	5                       ; { %8 | %7 | %11 | %1 | %58 | %21 | %22 | %23 | %57 | x | - }
	DROP                            ; { %8 | %7 | %11 | %1 | %58 | %21 | %22 | %23 | %57 | - }
	ROLL	5                       ; { %8 | %7 | %11 | %58 | %21 | %22 | %23 | %57 | %1 | - }
	BLKSWAP	2, 7                    ; { %11 | %58 | %21 | %22 | %23 | %57 | %1 | %8 | %7 | - }
	SWAP                            ; { %11 | %58 | %21 | %22 | %23 | %57 | %1 | %7 | %8 | - }
	ROLL	8                       ; { %58 | %21 | %22 | %23 | %57 | %1 | %7 | %8 | %11 | - }
	ROLL	4                       ; { %58 | %21 | %22 | %23 | %1 | %7 | %8 | %11 | %57 | - }
	BLKSWAP	2, 7                    ; { %22 | %23 | %1 | %7 | %8 | %11 | %57 | %58 | %21 | - }
	BLKSWAP	2, 7                    ; { %1 | %7 | %8 | %11 | %57 | %58 | %21 | %22 | %23 | - }
	SWAP                            ; { %1 | %7 | %8 | %11 | %57 | %58 | %21 | %23 | %22 | - }
	IFELSE                          ; { %1 | %7 | %8 | %11 | %57 | %58 | %21 | %23 | %22 | - } => { %1 | %7 | %8 | %11 | %57 | %58 | - }
.Lfunc_end2:
	.size	transfer_Impl, .Lfunc_end2-transfer_Impl
                                        ; -- End function
	.globl	build_msg_address_int   ; -- Begin function build_msg_address_int
	.p2align	1
	.type	build_msg_address_int,@function
build_msg_address_int:                  ; @build_msg_address_int
; %bb.0:                                ; %entry
                                        ; { %1 | %3 | %6 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %3 | %6 | %0 | - }
	PUSH	s3                      ; { %1 | %3 | %6 | %0 | %1 | - }
	ADDCONST	8               ; >%2 = ADDCONST %1, 8
                                        ; { %1 | %3 | %6 | %0 | %2 | - }
	XCHG2	s0, s3                  ; { %1 | %0 | %6 | %2 | %3 | - }
	CALL	$:store$                ; { %1 | %0 | %6 | - }
	PUSHINT	0                       ; >%7 = CONST_I64 0
                                        ; { %1 | %0 | %6 | %7 | - }
	PUSH	s3                      ; { %1 | %0 | %6 | %7 | %1 | - }
	SWAP                            ; { %1 | %0 | %6 | %1 | %7 | - }
	CALL	$:store$                ; { %1 | %0 | %6 | - }
	XCHG	s0, s2                  ; { %6 | %0 | %1 | - }
	ADDCONST	16              ; >%5 = ADDCONST %1, 16
                                        ; { %6 | %0 | %5 | - }
	XCHG2	s0, s2                  ; { %0 | %5 | %6 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end3:
	.size	build_msg_address_int, .Lfunc_end3-build_msg_address_int
                                        ; -- End function
	.globl	build_internal_message  ; -- Begin function build_internal_message
	.p2align	1
	.type	build_internal_message,@function
build_internal_message:                 ; @build_internal_message
; %bb.0:                                ; %entry
                                        ; { %6 | %7 | - }
	PUSHINT	168                     ; >%86 = CONST_I64 168
                                        ; { %6 | %7 | %86 | - }
	CALL	$:enter$                ; { %6 | %7 | - }
	PUSH	c0                      ; >%5 = PUSHC 0
                                        ; { %6 | %7 | %5 | - }
	PUSHINT	0                       ; >%53 = CONST_I64 0
                                        ; { %6 | %7 | %5 | %53 | - }
	PUSHINT	0                       ; >%87 = CONST_I64 0
                                        ; { %6 | %7 | %5 | %53 | %87 | - }
	PUSH	s3                      ; { %6 | %7 | %5 | %53 | %87 | %7 | - }
	SWAP                            ; { %6 | %7 | %5 | %53 | %7 | %87 | - }
	NEQ                             ; >%9 = NE %7, %87
                                        ; { %6 | %7 | %5 | %53 | %9 | - }
	PUSHCONT                        ; >%10 = PUSHCONT_MBB %bb.6, 0
                                        ; { %6 | %7 | %5 | %53 | %9 | %10 | - }
	{
; %bb.6:                                ; %entry.tonstdlib_log_8.exit.cleanup
                                        ; { %5 | %6 | %7 | %52 | %53 | - }
	  SWAP                          ; { %5 | %6 | %7 | %53 | %52 | - }
	  JMPX                          ; { %5 | %6 | %7 | %53 | %52 | - } => { %5 | %6 | %7 | %53 | - }
	}
	PUSHCONT                        ; >%11 = PUSHCONT_MBB %bb.4, 0
                                        ; { %6 | %7 | %5 | %53 | %9 | %10 | %11 | - }
	{
; %bb.4:                                ; %entry.while.body.i.cleanup
                                        ; { %5 | %6 | %7 | %52 | x | - }
	  PUSHCONT
	  {
; %bb.1:                                ; %while.body.i
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | - }
	    PUSHINT	18446744073709551615 ; >%88 = CONST_U64 -1
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %88 | - }
	    AND                         ; >%17 = AND %54, %88
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %17 | - }
	    SWAP                        ; { %5 | %6 | %7 | %15 | %52 | %17 | %53 | - }
	    INC                         ; >%53 = INC %53
                                        ; { %5 | %6 | %7 | %15 | %52 | %17 | %53 | - }
	    SWAP                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %17 | - }
	    RSHIFT	8               ; >%54 = SHRCONST %17, 8
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | - }
	    PUSHINT	0               ; >%89 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %89 | - }
	    PUSH	s1              ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %89 | %54 | - }
	    SWAP                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %54 | %89 | - }
	    NEQ                         ; >%19 = NE %54, %89
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %19 | - }
	    PUSHCONT
	    {
; %bb.5:                                ; %while.body.i.tonstdlib_log_8.exit.cleanup
                                        ; { %5 | %6 | %7 | x | %52 | %53 | x | - }
	      DROP                      ; { %5 | %6 | %7 | x | %52 | %53 | - }
	      ROLL	2               ; { %5 | %6 | %7 | %52 | %53 | x | - }
	      DROP                      ; { %5 | %6 | %7 | %52 | %53 | - }
	      SWAP                      ; { %5 | %6 | %7 | %53 | %52 | - }
	      JMPX                      ; { %5 | %6 | %7 | %53 | %52 | - } => { %5 | %6 | %7 | %53 | - }
	    }                           ; >%20 = PUSHCONT_MBB %bb.5, 0
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %19 | %20 | - }
	    PUSHCONT
	    {
; %bb.3:                                ; %while.body.i.while.body.i.cleanup
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | - }
	      PUSH	s3              ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %15 | - }
	      JMPX                      ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %15 | - } => { %5 | %6 | %7 | %15 | %52 | %53 | %54 | - }
	    }                           ; >%21 = PUSHCONT_MBB %bb.3, 0
                                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %19 | %20 | %21 | - }
	    SWAP                        ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %19 | %21 | %20 | - }
	    IFELSE                      ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %19 | %21 | %20 | - } => { %5 | %6 | %7 | %15 | %52 | %53 | %54 | - }
	  }                             ; >%15 = PUSHCONT_MBB %bb.1, 0
                                        ; { %5 | %6 | %7 | %52 | x | %15 | - }
	  PUSHINT	0               ; >%53 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %52 | x | %15 | %53 | - }
	  PUSH	s4                      ; { %5 | %6 | %7 | %52 | x | %15 | %53 | %7 | - }
	                                ; >%54 = REG_TO_REG_COPY %7
                                        ; { %5 | %6 | %7 | %52 | x | %15 | %53 | %54 | - }
	  ROLL	3                       ; { %5 | %6 | %7 | %52 | %15 | %53 | %54 | x | - }
	  DROP                          ; { %5 | %6 | %7 | %52 | %15 | %53 | %54 | - }
	  PUSH	s2                      ; { %5 | %6 | %7 | %52 | %15 | %53 | %54 | %15 | - }
	  BLKSWAP	2, 3            ; { %5 | %6 | %7 | %53 | %54 | %15 | %52 | %15 | - }
	  SWAP                          ; { %5 | %6 | %7 | %53 | %54 | %15 | %15 | %52 | - }
	  BLKSWAP	3, 2            ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %15 | - }
	  JMPX                          ; { %5 | %6 | %7 | %15 | %52 | %53 | %54 | %15 | - } => { %5 | %6 | %7 | %15 | %52 | %53 | %54 | - }
	}
	PUSHCONT                        ; >%52 = PUSHCONT_MBB %bb.2, 0
                                        ; { %6 | %7 | %5 | %53 | %9 | %10 | %11 | %52 | - }
	{
; %bb.2:                                ; %tonstdlib_log_8.exit
                                        ; { %5 | %6 | %7 | %53 | - }
	  PUSHINT	0               ; >%90 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %90 | - }
	  CALL	$:frameidx$             ; >%59 = CALL_FRAMEIDX %90
                                        ; { %5 | %6 | %7 | %53 | %59 | - }
	  ADDCONST	24              ; >%24 = ADDCONST %59, 24
                                        ; { %5 | %6 | %7 | %53 | %24 | - }
	  PUSHINT	0               ; >%91 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %24 | %91 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | - }
	  PUSHINT	0               ; >%92 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %92 | - }
	  CALL	$:frameidx$             ; >%61 = CALL_FRAMEIDX %92
                                        ; { %5 | %6 | %7 | %53 | %61 | - }
	  ADDCONST	16              ; >%25 = ADDCONST %61, 16
                                        ; { %5 | %6 | %7 | %53 | %25 | - }
	  PUSHINT	0               ; >%93 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %25 | %93 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | - }
	  PUSHINT	0               ; >%94 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %94 | - }
	  CALL	$:frameidx$             ; >%63 = CALL_FRAMEIDX %94
                                        ; { %5 | %6 | %7 | %53 | %63 | - }
	  ADDCONST	8               ; >%26 = ADDCONST %63, 8
                                        ; { %5 | %6 | %7 | %53 | %26 | - }
	  PUSHINT	0               ; >%95 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %26 | %95 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | - }
	  PUSHINT	0               ; >%96 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %96 | - }
	  CALL	$:frameidx$             ; >%65 = CALL_FRAMEIDX %96
                                        ; { %5 | %6 | %7 | %53 | %65 | - }
	  PUSHINT	0               ; >%97 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %65 | %97 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | - }
	  PUSH	s2                      ; { %5 | %6 | %7 | %53 | %6 | - }
	  ADDCONST	16              ; >%27 = ADDCONST %6, 16
                                        ; { %5 | %6 | %7 | %53 | %27 | - }
	  DUP                           ; { %5 | %6 | %7 | %53 | %27 | %27 | - }
	  CALL	$:load$                 ; >%28 = CALL_LOAD %27
                                        ; { %5 | %6 | %7 | %53 | %27 | %28 | - }
	  PUSHINT	0               ; >%98 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %27 | %28 | %98 | - }
	  CALL	$:frameidx$             ; >%67 = CALL_FRAMEIDX %98
                                        ; { %5 | %6 | %7 | %53 | %27 | %28 | %67 | - }
	  ADDCONST	48              ; >%29 = ADDCONST %67, 48
                                        ; { %5 | %6 | %7 | %53 | %27 | %28 | %29 | - }
	  SWAP                          ; { %5 | %6 | %7 | %53 | %27 | %29 | %28 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | %27 | - }
	  PUSH	s3                      ; { %5 | %6 | %7 | %53 | %27 | %6 | - }
	  ADDCONST	8               ; >%30 = ADDCONST %6, 8
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | - }
	  DUP                           ; { %5 | %6 | %7 | %53 | %27 | %30 | %30 | - }
	  CALL	$:load$                 ; >%31 = CALL_LOAD %30
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %31 | - }
	  PUSHINT	0               ; >%99 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %31 | %99 | - }
	  CALL	$:frameidx$             ; >%69 = CALL_FRAMEIDX %99
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %31 | %69 | - }
	  ADDCONST	40              ; >%32 = ADDCONST %69, 40
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %31 | %32 | - }
	  SWAP                          ; { %5 | %6 | %7 | %53 | %27 | %30 | %32 | %31 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | %27 | %30 | - }
	  PUSH	s4                      ; { %5 | %6 | %7 | %53 | %27 | %30 | %6 | - }
	  CALL	$:load$                 ; >%33 = CALL_LOAD %6
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %33 | - }
	  PUSHINT	0               ; >%100 = CONST_I64 0
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %33 | %100 | - }
	  CALL	$:frameidx$             ; >%71 = CALL_FRAMEIDX %100
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %33 | %71 | - }
	  ADDCONST	32              ; >%34 = ADDCONST %71, 32
                                        ; { %5 | %6 | %7 | %53 | %27 | %30 | %33 | %34 | - }
	  SWAP                          ; { %5 | %6 | %7 | %53 | %27 | %30 | %34 | %33 | - }
	  CALL	$:store$                ; { %5 | %6 | %7 | %53 | %27 | %30 | - }
	  XCHG	s0, s4                  ; { %5 | %30 | %7 | %53 | %27 | %6 | - }
	  CALL	$:load$                 ; >%35 = CALL_LOAD %6
                                        ; { %5 | %30 | %7 | %53 | %27 | %35 | - }
	  XCHG	s0, s4                  ; { %5 | %35 | %7 | %53 | %27 | %30 | - }
	  CALL	$:load$                 ; >%36 = CALL_LOAD %30
                                        ; { %5 | %35 | %7 | %53 | %27 | %36 | - }
	  SWAP                          ; { %5 | %35 | %7 | %53 | %36 | %27 | - }
	  CALL	$:load$                 ; >%37 = CALL_LOAD %27
                                        ; { %5 | %35 | %7 | %53 | %36 | %37 | - }
	  PUSHINT	0               ; >%101 = CONST_I64 0
                                        ; { %5 | %35 | %7 | %53 | %36 | %37 | %101 | - }
	  CALL	$:frameidx$             ; >%73 = CALL_FRAMEIDX %101
                                        ; { %5 | %35 | %7 | %53 | %36 | %37 | %73 | - }
	  ADDCONST	80              ; >%38 = ADDCONST %73, 80
                                        ; { %5 | %35 | %7 | %53 | %36 | %37 | %38 | - }
	  XCHG2	s0, s3                  ; { %5 | %35 | %7 | %37 | %36 | %38 | %53 | - }
	  CALL	$:store$                ; { %5 | %35 | %7 | %37 | %36 | - }
	  PUSHINT	0               ; >%102 = CONST_I64 0
                                        ; { %5 | %35 | %7 | %37 | %36 | %102 | - }
	  CALL	$:frameidx$             ; >%75 = CALL_FRAMEIDX %102
                                        ; { %5 | %35 | %7 | %37 | %36 | %75 | - }
	  ADDCONST	88              ; >%39 = ADDCONST %75, 88
                                        ; { %5 | %35 | %7 | %37 | %36 | %39 | - }
	  XCHG2	s0, s3                  ; { %5 | %35 | %36 | %37 | %39 | %7 | - }
	  CALL	$:store$                ; { %5 | %35 | %36 | %37 | - }
	  PUSHINT	0               ; >%103 = CONST_I64 0
                                        ; { %5 | %35 | %36 | %37 | %103 | - }
	  CALL	$:frameidx$             ; >%77 = CALL_FRAMEIDX %103
                                        ; { %5 | %35 | %36 | %37 | %77 | - }
	  ADDCONST	72              ; >%40 = ADDCONST %77, 72
                                        ; { %5 | %35 | %36 | %37 | %40 | - }
	  SWAP                          ; { %5 | %35 | %36 | %40 | %37 | - }
	  CALL	$:store$                ; { %5 | %35 | %36 | - }
	  PUSHINT	0               ; >%104 = CONST_I64 0
                                        ; { %5 | %35 | %36 | %104 | - }
	  CALL	$:frameidx$             ; >%79 = CALL_FRAMEIDX %104
                                        ; { %5 | %35 | %36 | %79 | - }
	  ADDCONST	64              ; >%41 = ADDCONST %79, 64
                                        ; { %5 | %35 | %36 | %41 | - }
	  SWAP                          ; { %5 | %35 | %41 | %36 | - }
	  CALL	$:store$                ; { %5 | %35 | - }
	  PUSHINT	0               ; >%105 = CONST_I64 0
                                        ; { %5 | %35 | %105 | - }
	  CALL	$:frameidx$             ; >%81 = CALL_FRAMEIDX %105
                                        ; { %5 | %35 | %81 | - }
	  ADDCONST	56              ; >%42 = ADDCONST %81, 56
                                        ; { %5 | %35 | %42 | - }
	  SWAP                          ; { %5 | %42 | %35 | - }
	  CALL	$:store$                ; { %5 | - }
	  PUSHINT	$memset$
	                                ; >%43 = PUSH_GLOBAL_ADDRESS target-flags(<unknown>) &memset
                                        ; { %5 | %43 | - }
	  PUSHINT	0               ; >%106 = CONST_I64 0
                                        ; { %5 | %43 | %106 | - }
	  CALL	$:frameidx$             ; >%83 = CALL_FRAMEIDX %106
                                        ; { %5 | %43 | %83 | - }
	  ADDCONST	96              ; >%45 = ADDCONST %83, 96
                                        ; { %5 | %43 | %45 | - }
	  PUSHINT	0               ; >%107 = CONST_I64 0
                                        ; { %5 | %43 | %45 | %107 | - }
	  PUSHINT	72              ; >%108 = CONST_I64 72
                                        ; { %5 | %43 | %45 | %107 | %108 | - }
	  ROLL	2                       ; { %5 | %43 | %107 | %108 | %45 | - }
	  ROLL	2                       ; { %5 | %43 | %108 | %45 | %107 | - }
	  ROLL	2                       ; { %5 | %43 | %45 | %107 | %108 | - }
	  ROLL	3                       ; { %5 | %45 | %107 | %108 | %43 | - }
	  CALL	1                       ; >%46 = CALL_1 %45, %107, %108, %43
                                        ; { %5 | x | - }
	  PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%47 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %5 | x | %47 | - }
	  CALL	1                       ; { %5 | x | - }
	  PUSHINT	$Serialize_CommonMsgInfo_Impl$
	                                ; >%48 = PUSH_GLOBAL_ADDRESS @Serialize_CommonMsgInfo_Impl
                                        ; { %5 | x | %48 | - }
	  PUSHINT	0               ; >%109 = CONST_I64 0
                                        ; { %5 | x | %48 | %109 | - }
	  CALL	$:frameidx$             ; >%85 = CALL_FRAMEIDX %109
                                        ; { %5 | x | %48 | %85 | - }
	  SWAP                          ; { %5 | x | %85 | %48 | - }
	  CALL	1                       ; { %5 | x | - }
	  PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%49 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %5 | x | %49 | - }
	  PUSHINT	0               ; >%110 = CONST_I64 0
                                        ; { %5 | x | %49 | %110 | - }
	  PUSHINT	1               ; >%111 = CONST_I64 1
                                        ; { %5 | x | %49 | %110 | %111 | - }
	  BLKSWAP	1, 2            ; { %5 | x | %110 | %111 | %49 | - }
	  CALL	1                       ; { %5 | x | - }
	  DROP                          ; { %5 | - }
	  POP	c0                      ; { - }
	  PUSHINT	168             ; >%112 = CONST_I64 168
                                        ; { %112 | - }
	  CALL	$:leave$                ; { - }
                                        ; fallthrough return
	  
	}
	ROLL	5                       ; { %6 | %7 | %53 | %9 | %10 | %11 | %52 | %5 | - }
	BLKSWAP	2, 6                    ; { %53 | %9 | %10 | %11 | %52 | %5 | %6 | %7 | - }
	ROLL	3                       ; { %53 | %9 | %10 | %11 | %5 | %6 | %7 | %52 | - }
	BLKSWAP	2, 6                    ; { %10 | %11 | %5 | %6 | %7 | %52 | %53 | %9 | - }
	BLKSWAP	2, 6                    ; { %5 | %6 | %7 | %52 | %53 | %9 | %10 | %11 | - }
	SWAP                            ; { %5 | %6 | %7 | %52 | %53 | %9 | %11 | %10 | - }
	IFELSE                          ; { %5 | %6 | %7 | %52 | %53 | %9 | %11 | %10 | - } => { %5 | %6 | %7 | %52 | %53 | - }
.Lfunc_end4:
	.size	build_internal_message, .Lfunc_end4-build_internal_message
                                        ; -- End function
	.globl	send_raw_message        ; -- Begin function send_raw_message
	.p2align	1
	.type	send_raw_message,@function
send_raw_message:                       ; @send_raw_message
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_send_work_slice_as_rawmsg$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_send_work_slice_as_rawmsg
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end5:
	.size	send_raw_message, .Lfunc_end5-send_raw_message
                                        ; -- End function
	.globl	initialize_target       ; -- Begin function initialize_target
	.p2align	1
	.type	initialize_target,@function
initialize_target:                      ; @initialize_target
; %bb.0:                                ; %entry
                                        ; { - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %0 | %1 | - }
	PUSHINT	64                      ; >%12 = CONST_I64 64
                                        ; { %0 | %1 | %12 | - }
	SWAP                            ; { %0 | %12 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %12, %1
                                        ; { %0 | %3 | - }
	PUSHINT	$target_persistent$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @target_persistent
                                        ; { %0 | %3 | %4 | - }
	DUP                             ; { %0 | %3 | %4 | %4 | - }
	CALL	$:load$                 ; >%5 = CALL_LOAD %4
                                        ; { %0 | %3 | %4 | %5 | - }
	PUSHINT	18446744073709551615    ; >%13 = CONST_U64 -1
                                        ; { %0 | %3 | %4 | %5 | %13 | - }
	AND                             ; >%7 = AND %5, %13
                                        ; { %0 | %3 | %4 | %7 | - }
	PUSHINT	18446744073709551615    ; >%14 = CONST_U64 -1
                                        ; { %0 | %3 | %4 | %7 | %14 | - }
	PUSH	s3                      ; { %0 | %3 | %4 | %7 | %14 | %3 | - }
	SWAP                            ; { %0 | %3 | %4 | %7 | %3 | %14 | - }
	AND                             ; >%8 = AND %3, %14
                                        ; { %0 | %3 | %4 | %7 | %8 | - }
	LEQ                             ; >%9 = SLE %7, %8
                                        ; { %0 | %3 | %4 | %9 | - }
	PUSHINT	1                       ; >%15 = CONST_I64 1
                                        ; { %0 | %3 | %4 | %9 | %15 | - }
	AND                             ; >%11 = AND %9, %15
                                        ; { %0 | %3 | %4 | %11 | - }
	THROWIF	62                      ; { %0 | %3 | %4 | - }
	SWAP                            ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end6:
	.size	initialize_target, .Lfunc_end6-initialize_target
                                        ; -- End function
	.globl	Deserialize_Unsigned_Impl ; -- Begin function Deserialize_Unsigned_Impl
	.p2align	1
	.type	Deserialize_Unsigned_Impl,@function
Deserialize_Unsigned_Impl:              ; @Deserialize_Unsigned_Impl
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %2, %1
                                        ; { %0 | %3 | - }
	SWAP                            ; { %3 | %0 | - }
	POP	c0                      ; { %3 | - }
                                        ; fallthrough return
.Lfunc_end7:
	.size	Deserialize_Unsigned_Impl, .Lfunc_end7-Deserialize_Unsigned_Impl
                                        ; -- End function
	.globl	transfer                ; -- Begin function transfer
	.p2align	1
	.type	transfer,@function
transfer:                               ; @transfer
; %bb.0:                                ; %entry
                                        ; { - }
	PUSHINT	264                     ; >%99 = CONST_I64 264
                                        ; { %99 | - }
	CALL	$:enter$                ; { - }
	PUSH	c0                      ; >%8 = PUSHC 0
                                        ; { %8 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%9 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %8 | %9 | - }
	PUSHINT	256                     ; >%100 = CONST_I64 256
                                        ; { %8 | %9 | %100 | - }
	SWAP                            ; { %8 | %100 | %9 | - }
	CALL	1                       ; >%0 = CALL_1 %100, %9
                                        ; { %8 | %0 | - }
	PUSHINT	$tonstdlib_get_smart_contract_info$
	                                ; >%11 = PUSH_GLOBAL_ADDRESS @tonstdlib_get_smart_contract_info
                                        ; { %8 | %0 | %11 | - }
	CALL	1                       ; { %8 | %0 | - }
	PUSHINT	$Deserialize_SmartContractInfo_Impl$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @Deserialize_SmartContractInfo_Impl
                                        ; { %8 | %0 | %12 | - }
	PUSHINT	168                     ; >%101 = CONST_I64 168
                                        ; { %8 | %0 | %12 | %101 | - }
	CALL	$:frameidx$             ; >%66 = CALL_FRAMEIDX %101
                                        ; { %8 | %0 | %12 | %66 | - }
	SWAP                            ; { %8 | %0 | %66 | %12 | - }
	CALL	1                       ; { %8 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%13 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %8 | %0 | %13 | - }
	DUP                             ; { %8 | %0 | %13 | %13 | - }
	CALL	1                       ; { %8 | %0 | %13 | - }
	PUSHINT	$target_persistent$
	                                ; >%14 = PUSH_GLOBAL_ADDRESS @target_persistent
                                        ; { %8 | %0 | %13 | %14 | - }
	CALL	$:load$                 ; >%15 = CALL_LOAD %14
                                        ; { %8 | %0 | %13 | %15 | - }
	PUSHINT	168                     ; >%102 = CONST_I64 168
                                        ; { %8 | %0 | %13 | %15 | %102 | - }
	CALL	$:frameidx$             ; >%68 = CALL_FRAMEIDX %102
                                        ; { %8 | %0 | %13 | %15 | %68 | - }
	ADDCONST	56              ; >%16 = ADDCONST %68, 56
                                        ; { %8 | %0 | %13 | %15 | %16 | - }
	CALL	$:load$                 ; >%17 = CALL_LOAD %16
                                        ; { %8 | %0 | %13 | %15 | %17 | - }
	PUXC	s0, s1                  ; { %8 | %0 | %13 | %17 | %17 | %15 | - }
	LESS                            ; >%18 = SLT %17, %15
                                        ; { %8 | %0 | %13 | %17 | %18 | - }
	PUSHINT	1                       ; >%103 = CONST_I64 1
                                        ; { %8 | %0 | %13 | %17 | %18 | %103 | - }
	AND                             ; >%20 = AND %18, %103
                                        ; { %8 | %0 | %13 | %17 | %20 | - }
	THROWIF	61                      ; { %8 | %0 | %13 | %17 | - }
	PUSHINT	-10000000               ; >%104 = CONST_I64 -10000000
                                        ; { %8 | %0 | %13 | %17 | %104 | - }
	ADD                             ; >%2 = ADD %17, %104
                                        ; { %8 | %0 | %13 | %2 | - }
	PUSHINT	168                     ; >%105 = CONST_I64 168
                                        ; { %8 | %0 | %13 | %2 | %105 | - }
	CALL	$:frameidx$             ; >%70 = CALL_FRAMEIDX %105
                                        ; { %8 | %0 | %13 | %2 | %70 | - }
	PUSHINT	0                       ; >%1 = REG_TO_REG_COPY %70
                                        ; { %8 | %0 | %13 | %2 | x | - }
                                        ; >%60 = CONST_I64 0
                                        ; { %8 | %0 | %13 | %2 | x | %60 | - }
	PUSHINT	0                       ; >%106 = CONST_I64 0
                                        ; { %8 | %0 | %13 | %2 | x | %60 | %106 | - }
	PUSH	s3                      ; { %8 | %0 | %13 | %2 | x | %60 | %106 | %2 | - }
	SWAP                            ; { %8 | %0 | %13 | %2 | x | %60 | %2 | %106 | - }
	NEQ                             ; >%23 = NE %2, %106
                                        ; { %8 | %0 | %13 | %2 | x | %60 | %23 | - }
	PUSHCONT                        ; >%24 = PUSHCONT_MBB %bb.6, 0
                                        ; { %8 | %0 | %13 | %2 | x | %60 | %23 | %24 | - }
	{
; %bb.6:                                ; %entry.transfer_Impl.exit.cleanup
                                        ; { %0 | %2 | %8 | %13 | %59 | %60 | - }
	  SWAP                          ; { %0 | %2 | %8 | %13 | %60 | %59 | - }
	  JMPX                          ; { %0 | %2 | %8 | %13 | %60 | %59 | - } => { %0 | %2 | %8 | %13 | %60 | - }
	}
	PUSHCONT                        ; >%25 = PUSHCONT_MBB %bb.4, 0
                                        ; { %8 | %0 | %13 | %2 | x | %60 | %23 | %24 | %25 | - }
	{
; %bb.4:                                ; %entry.while.body.i.i.i.cleanup
                                        ; { %0 | %2 | %8 | %13 | %59 | x | - }
	  PUSHCONT
	  {
; %bb.1:                                ; %while.body.i.i.i
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | - }
	    PUSHINT	18446744073709551615 ; >%107 = CONST_U64 -1
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %107 | - }
	    AND                         ; >%31 = AND %61, %107
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %31 | - }
	    SWAP                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %31 | %60 | - }
	    INC                         ; >%60 = INC %60
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %31 | %60 | - }
	    SWAP                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %31 | - }
	    RSHIFT	8               ; >%61 = SHRCONST %31, 8
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | - }
	    PUSHINT	0               ; >%108 = CONST_I64 0
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %108 | - }
	    PUSH	s1              ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %108 | %61 | - }
	    SWAP                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %61 | %108 | - }
	    NEQ                         ; >%33 = NE %61, %108
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %33 | - }
	    PUSHCONT
	    {
; %bb.5:                                ; %while.body.i.i.i.transfer_Impl.exit.cleanup
                                        ; { %0 | %2 | %8 | %13 | x | %59 | %60 | x | - }
	      DROP                      ; { %0 | %2 | %8 | %13 | x | %59 | %60 | - }
	      ROLL	2               ; { %0 | %2 | %8 | %13 | %59 | %60 | x | - }
	      DROP                      ; { %0 | %2 | %8 | %13 | %59 | %60 | - }
	      SWAP                      ; { %0 | %2 | %8 | %13 | %60 | %59 | - }
	      JMPX                      ; { %0 | %2 | %8 | %13 | %60 | %59 | - } => { %0 | %2 | %8 | %13 | %60 | - }
	    }                           ; >%34 = PUSHCONT_MBB %bb.5, 0
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %33 | %34 | - }
	    PUSHCONT
	    {
; %bb.3:                                ; %while.body.i.i.i.while.body.i.i.i.cleanup
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | - }
	      PUSH	s3              ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %29 | - }
	      JMPX                      ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %29 | - } => { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | - }
	    }                           ; >%35 = PUSHCONT_MBB %bb.3, 0
                                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %33 | %34 | %35 | - }
	    SWAP                        ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %33 | %35 | %34 | - }
	    IFELSE                      ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %33 | %35 | %34 | - } => { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | - }
	  }                             ; >%29 = PUSHCONT_MBB %bb.1, 0
                                        ; { %0 | %2 | %8 | %13 | %59 | x | %29 | - }
	  PUSHINT	0               ; >%60 = CONST_I64 0
                                        ; { %0 | %2 | %8 | %13 | %59 | x | %29 | %60 | - }
	  PUSH	s6                      ; { %0 | %2 | %8 | %13 | %59 | x | %29 | %60 | %2 | - }
	                                ; >%61 = REG_TO_REG_COPY %2
                                        ; { %0 | %2 | %8 | %13 | %59 | x | %29 | %60 | %61 | - }
	  ROLL	3                       ; { %0 | %2 | %8 | %13 | %59 | %29 | %60 | %61 | x | - }
	  DROP                          ; { %0 | %2 | %8 | %13 | %59 | %29 | %60 | %61 | - }
	  PUSH	s2                      ; { %0 | %2 | %8 | %13 | %59 | %29 | %60 | %61 | %29 | - }
	  BLKSWAP	2, 3            ; { %0 | %2 | %8 | %13 | %60 | %61 | %29 | %59 | %29 | - }
	  SWAP                          ; { %0 | %2 | %8 | %13 | %60 | %61 | %29 | %29 | %59 | - }
	  BLKSWAP	3, 2            ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %29 | - }
	  JMPX                          ; { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | %29 | - } => { %0 | %2 | %8 | %13 | %29 | %59 | %60 | %61 | - }
	}
	PUSHCONT                        ; >%59 = PUSHCONT_MBB %bb.2, 0
                                        ; { %8 | %0 | %13 | %2 | x | %60 | %23 | %24 | %25 | %59 | - }
	{
; %bb.2:                                ; %transfer_Impl.exit
                                        ; { %0 | %2 | %8 | %13 | %60 | - }
	  PUSHINT	0               ; >%109 = CONST_I64 0
                                        ; { %0 | %2 | %8 | %13 | %60 | %109 | - }
	  CALL	$:frameidx$             ; >%72 = CALL_FRAMEIDX %109
                                        ; { %0 | %2 | %8 | %13 | %60 | %72 | - }
	  ADDCONST	48              ; >%37 = ADDCONST %72, 48
                                        ; { %0 | %2 | %8 | %13 | %60 | %37 | - }
	  PUSH	s5                      ; { %0 | %2 | %8 | %13 | %60 | %37 | %0 | - }
	  CALL	$:store$                ; { %0 | %2 | %8 | %13 | %60 | - }
	  PUSHINT	0               ; >%110 = CONST_I64 0
                                        ; { %0 | %2 | %8 | %13 | %60 | %110 | - }
	  CALL	$:frameidx$             ; >%74 = CALL_FRAMEIDX %110
                                        ; { %0 | %2 | %8 | %13 | %60 | %74 | - }
	  ADDCONST	72              ; >%38 = ADDCONST %74, 72
                                        ; { %0 | %2 | %8 | %13 | %60 | %38 | - }
	  XCHG2	s0, s5                  ; { %60 | %2 | %8 | %13 | %38 | %0 | - }
	  CALL	$:store$                ; { %60 | %2 | %8 | %13 | - }
	  PUSHINT	0               ; >%111 = CONST_I64 0
                                        ; { %60 | %2 | %8 | %13 | %111 | - }
	  CALL	$:frameidx$             ; >%76 = CALL_FRAMEIDX %111
                                        ; { %60 | %2 | %8 | %13 | %76 | - }
	  ADDCONST	80              ; >%39 = ADDCONST %76, 80
                                        ; { %60 | %2 | %8 | %13 | %39 | - }
	  XCHG2	s0, s4                  ; { %13 | %2 | %8 | %39 | %60 | - }
	  CALL	$:store$                ; { %13 | %2 | %8 | - }
	  PUSHINT	0               ; >%112 = CONST_I64 0
                                        ; { %13 | %2 | %8 | %112 | - }
	  CALL	$:frameidx$             ; >%78 = CALL_FRAMEIDX %112
                                        ; { %13 | %2 | %8 | %78 | - }
	  ADDCONST	88              ; >%40 = ADDCONST %78, 88
                                        ; { %13 | %2 | %8 | %40 | - }
	  XCHG2	s0, s2                  ; { %13 | %8 | %40 | %2 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%113 = CONST_I64 0
                                        ; { %13 | %8 | %113 | - }
	  CALL	$:frameidx$             ; >%80 = CALL_FRAMEIDX %113
                                        ; { %13 | %8 | %80 | - }
	  ADDCONST	40              ; >%42 = ADDCONST %80, 40
                                        ; { %13 | %8 | %42 | - }
	  PUSHINT	0               ; >%114 = CONST_I64 0
                                        ; { %13 | %8 | %42 | %114 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%115 = CONST_I64 0
                                        ; { %13 | %8 | %115 | - }
	  CALL	$:frameidx$             ; >%82 = CALL_FRAMEIDX %115
                                        ; { %13 | %8 | %82 | - }
	  ADDCONST	32              ; >%43 = ADDCONST %82, 32
                                        ; { %13 | %8 | %43 | - }
	  PUSHINT	0               ; >%116 = CONST_I64 0
                                        ; { %13 | %8 | %43 | %116 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%117 = CONST_I64 0
                                        ; { %13 | %8 | %117 | - }
	  CALL	$:frameidx$             ; >%84 = CALL_FRAMEIDX %117
                                        ; { %13 | %8 | %84 | - }
	  ADDCONST	24              ; >%44 = ADDCONST %84, 24
                                        ; { %13 | %8 | %44 | - }
	  PUSHINT	0               ; >%118 = CONST_I64 0
                                        ; { %13 | %8 | %44 | %118 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%119 = CONST_I64 0
                                        ; { %13 | %8 | %119 | - }
	  CALL	$:frameidx$             ; >%86 = CALL_FRAMEIDX %119
                                        ; { %13 | %8 | %86 | - }
	  ADDCONST	16              ; >%45 = ADDCONST %86, 16
                                        ; { %13 | %8 | %45 | - }
	  PUSHINT	0               ; >%120 = CONST_I64 0
                                        ; { %13 | %8 | %45 | %120 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%121 = CONST_I64 0
                                        ; { %13 | %8 | %121 | - }
	  CALL	$:frameidx$             ; >%88 = CALL_FRAMEIDX %121
                                        ; { %13 | %8 | %88 | - }
	  ADDCONST	8               ; >%46 = ADDCONST %88, 8
                                        ; { %13 | %8 | %46 | - }
	  PUSHINT	0               ; >%122 = CONST_I64 0
                                        ; { %13 | %8 | %46 | %122 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%123 = CONST_I64 0
                                        ; { %13 | %8 | %123 | - }
	  CALL	$:frameidx$             ; >%90 = CALL_FRAMEIDX %123
                                        ; { %13 | %8 | %90 | - }
	  ADDCONST	64              ; >%47 = ADDCONST %90, 64
                                        ; { %13 | %8 | %47 | - }
	  PUSHINT	0               ; >%124 = CONST_I64 0
                                        ; { %13 | %8 | %47 | %124 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%125 = CONST_I64 0
                                        ; { %13 | %8 | %125 | - }
	  CALL	$:frameidx$             ; >%92 = CALL_FRAMEIDX %125
                                        ; { %13 | %8 | %92 | - }
	  ADDCONST	56              ; >%48 = ADDCONST %92, 56
                                        ; { %13 | %8 | %48 | - }
	  PUSHINT	0               ; >%126 = CONST_I64 0
                                        ; { %13 | %8 | %48 | %126 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	0               ; >%127 = CONST_I64 0
                                        ; { %13 | %8 | %127 | - }
	  CALL	$:frameidx$             ; >%94 = CALL_FRAMEIDX %127
                                        ; { %13 | %8 | %94 | - }
	  PUSHINT	0               ; >%128 = CONST_I64 0
                                        ; { %13 | %8 | %94 | %128 | - }
	  CALL	$:store$                ; { %13 | %8 | - }
	  PUSHINT	$memset$
	                                ; >%49 = PUSH_GLOBAL_ADDRESS target-flags(<unknown>) &memset
                                        ; { %13 | %8 | %49 | - }
	  PUSHINT	0               ; >%129 = CONST_I64 0
                                        ; { %13 | %8 | %49 | %129 | - }
	  CALL	$:frameidx$             ; >%96 = CALL_FRAMEIDX %129
                                        ; { %13 | %8 | %49 | %96 | - }
	  ADDCONST	96              ; >%51 = ADDCONST %96, 96
                                        ; { %13 | %8 | %49 | %51 | - }
	  PUSHINT	0               ; >%130 = CONST_I64 0
                                        ; { %13 | %8 | %49 | %51 | %130 | - }
	  PUSHINT	72              ; >%131 = CONST_I64 72
                                        ; { %13 | %8 | %49 | %51 | %130 | %131 | - }
	  ROLL	2                       ; { %13 | %8 | %49 | %130 | %131 | %51 | - }
	  ROLL	2                       ; { %13 | %8 | %49 | %131 | %51 | %130 | - }
	  ROLL	2                       ; { %13 | %8 | %49 | %51 | %130 | %131 | - }
	  ROLL	3                       ; { %13 | %8 | %51 | %130 | %131 | %49 | - }
	  CALL	1                       ; >%52 = CALL_1 %51, %130, %131, %49
                                        ; { %13 | %8 | x | - }
	  DROP                          ; { %13 | %8 | - }
	  SWAP                          ; { %8 | %13 | - }
	  CALL	1                       ; { %8 | - }
	  PUSHINT	$Serialize_CommonMsgInfo_Impl$
	                                ; >%54 = PUSH_GLOBAL_ADDRESS @Serialize_CommonMsgInfo_Impl
                                        ; { %8 | %54 | - }
	  PUSHINT	0               ; >%132 = CONST_I64 0
                                        ; { %8 | %54 | %132 | - }
	  CALL	$:frameidx$             ; >%98 = CALL_FRAMEIDX %132
                                        ; { %8 | %54 | %98 | - }
	  SWAP                          ; { %8 | %98 | %54 | - }
	  CALL	1                       ; { %8 | - }
	  PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%55 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %8 | %55 | - }
	  PUSHINT	0               ; >%133 = CONST_I64 0
                                        ; { %8 | %55 | %133 | - }
	  PUSHINT	1               ; >%134 = CONST_I64 1
                                        ; { %8 | %55 | %133 | %134 | - }
	  BLKSWAP	1, 2            ; { %8 | %133 | %134 | %55 | - }
	  CALL	1                       ; { %8 | - }
	  PUSHINT	$tonstdlib_send_work_slice_as_rawmsg$
	                                ; >%57 = PUSH_GLOBAL_ADDRESS @tonstdlib_send_work_slice_as_rawmsg
                                        ; { %8 | %57 | - }
	  PUSHINT	0               ; >%135 = CONST_I64 0
                                        ; { %8 | %57 | %135 | - }
	  SWAP                          ; { %8 | %135 | %57 | - }
	  CALL	1                       ; { %8 | - }
	  POP	c0                      ; { - }
	  PUSHINT	264             ; >%136 = CONST_I64 264
                                        ; { %136 | - }
	  CALL	$:leave$                ; { - }
                                        ; fallthrough return
	  
	}
	ROLL	5                       ; { %8 | %0 | %13 | %2 | %60 | %23 | %24 | %25 | %59 | x | - }
	DROP                            ; { %8 | %0 | %13 | %2 | %60 | %23 | %24 | %25 | %59 | - }
	ROLL	7                       ; { %8 | %13 | %2 | %60 | %23 | %24 | %25 | %59 | %0 | - }
	ROLL	6                       ; { %8 | %13 | %60 | %23 | %24 | %25 | %59 | %0 | %2 | - }
	ROLL	8                       ; { %13 | %60 | %23 | %24 | %25 | %59 | %0 | %2 | %8 | - }
	ROLL	8                       ; { %60 | %23 | %24 | %25 | %59 | %0 | %2 | %8 | %13 | - }
	ROLL	4                       ; { %60 | %23 | %24 | %25 | %0 | %2 | %8 | %13 | %59 | - }
	BLKSWAP	2, 7                    ; { %24 | %25 | %0 | %2 | %8 | %13 | %59 | %60 | %23 | - }
	BLKSWAP	2, 7                    ; { %0 | %2 | %8 | %13 | %59 | %60 | %23 | %24 | %25 | - }
	SWAP                            ; { %0 | %2 | %8 | %13 | %59 | %60 | %23 | %25 | %24 | - }
	IFELSE                          ; { %0 | %2 | %8 | %13 | %59 | %60 | %23 | %25 | %24 | - } => { %0 | %2 | %8 | %13 | %59 | %60 | - }
.Lfunc_end8:
	.size	transfer, .Lfunc_end8-transfer
                                        ; -- End function
	.globl	constructor             ; -- Begin function constructor
	.p2align	1
	.type	constructor,@function
constructor:                            ; @constructor
; %bb.0:                                ; %entry
                                        ; { - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end9:
	.size	constructor, .Lfunc_end9-constructor
                                        ; -- End function
	.globl	tonstdlib_log_8         ; -- Begin function tonstdlib_log_8
	.p2align	1
	.type	tonstdlib_log_8,@function
tonstdlib_log_8:                        ; @tonstdlib_log_8
; %bb.0:                                ; %entry
                                        ; { %25 | - }
	PUSH	c0                      ; >%5 = PUSHC 0
                                        ; { %25 | %5 | - }
	PUSHINT	0                       ; >%24 = CONST_I64 0
                                        ; { %25 | %5 | %24 | - }
	PUSHINT	0                       ; >%27 = CONST_I64 0
                                        ; { %25 | %5 | %24 | %27 | - }
	PUSH	s3                      ; { %25 | %5 | %24 | %27 | %25 | - }
	SWAP                            ; { %25 | %5 | %24 | %25 | %27 | - }
	NEQ                             ; >%8 = NE %25, %27
                                        ; { %25 | %5 | %24 | %8 | - }
	PUSHCONT                        ; >%9 = PUSHCONT_MBB %bb.6, 0
                                        ; { %25 | %5 | %24 | %8 | %9 | - }
	{
; %bb.6:                                ; %entry.while.end.cleanup
                                        ; { %5 | %23 | %24 | x | - }
	  DROP                          ; { %5 | %23 | %24 | - }
	  SWAP                          ; { %5 | %24 | %23 | - }
	  JMPX                          ; { %5 | %24 | %23 | - } => { %5 | %24 | - }
	}
	PUSHCONT                        ; >%10 = PUSHCONT_MBB %bb.4, 0
                                        ; { %25 | %5 | %24 | %8 | %9 | %10 | - }
	{
; %bb.4:                                ; %entry.while.body.cleanup
                                        ; { %5 | %23 | x | %25 | - }
	  PUSHCONT
	  {
; %bb.1:                                ; %while.body
                                        ; { %5 | %14 | %23 | %24 | %25 | - }
	    PUSHINT	18446744073709551615 ; >%28 = CONST_U64 -1
                                        ; { %5 | %14 | %23 | %24 | %25 | %28 | - }
	    AND                         ; >%16 = AND %25, %28
                                        ; { %5 | %14 | %23 | %24 | %16 | - }
	    SWAP                        ; { %5 | %14 | %23 | %16 | %24 | - }
	    INC                         ; >%24 = INC %24
                                        ; { %5 | %14 | %23 | %16 | %24 | - }
	    SWAP                        ; { %5 | %14 | %23 | %24 | %16 | - }
	    RSHIFT	8               ; >%25 = SHRCONST %16, 8
                                        ; { %5 | %14 | %23 | %24 | %25 | - }
	    PUSHINT	0               ; >%29 = CONST_I64 0
                                        ; { %5 | %14 | %23 | %24 | %25 | %29 | - }
	    PUSH	s1              ; { %5 | %14 | %23 | %24 | %25 | %29 | %25 | - }
	    SWAP                        ; { %5 | %14 | %23 | %24 | %25 | %25 | %29 | - }
	    NEQ                         ; >%18 = NE %25, %29
                                        ; { %5 | %14 | %23 | %24 | %25 | %18 | - }
	    PUSHCONT
	    {
; %bb.5:                                ; %while.body.while.end.cleanup
                                        ; { %5 | x | %23 | %24 | x | - }
	      DROP                      ; { %5 | x | %23 | %24 | - }
	      ROLL	2               ; { %5 | %23 | %24 | x | - }
	      DROP                      ; { %5 | %23 | %24 | - }
	      SWAP                      ; { %5 | %24 | %23 | - }
	      JMPX                      ; { %5 | %24 | %23 | - } => { %5 | %24 | - }
	    }                           ; >%19 = PUSHCONT_MBB %bb.5, 0
                                        ; { %5 | %14 | %23 | %24 | %25 | %18 | %19 | - }
	    PUSHCONT
	    {
; %bb.3:                                ; %while.body.while.body.cleanup
                                        ; { %5 | %14 | %23 | %24 | %25 | - }
	      PUSH	s3              ; { %5 | %14 | %23 | %24 | %25 | %14 | - }
	      JMPX                      ; { %5 | %14 | %23 | %24 | %25 | %14 | - } => { %5 | %14 | %23 | %24 | %25 | - }
	    }                           ; >%20 = PUSHCONT_MBB %bb.3, 0
                                        ; { %5 | %14 | %23 | %24 | %25 | %18 | %19 | %20 | - }
	    SWAP                        ; { %5 | %14 | %23 | %24 | %25 | %18 | %20 | %19 | - }
	    IFELSE                      ; { %5 | %14 | %23 | %24 | %25 | %18 | %20 | %19 | - } => { %5 | %14 | %23 | %24 | %25 | - }
	  }                             ; >%14 = PUSHCONT_MBB %bb.1, 0
                                        ; { %5 | %23 | x | %25 | %14 | - }
	  PUSHINT	0               ; >%24 = CONST_I64 0
                                        ; { %5 | %23 | x | %25 | %14 | %24 | - }
	  ROLL	3                       ; { %5 | %23 | %25 | %14 | %24 | x | - }
	  DROP                          ; { %5 | %23 | %25 | %14 | %24 | - }
	  PUSH	s1                      ; { %5 | %23 | %25 | %14 | %24 | %14 | - }
	  ROLL	2                       ; { %5 | %23 | %25 | %24 | %14 | %14 | - }
	  ROLL	4                       ; { %5 | %25 | %24 | %14 | %14 | %23 | - }
	  ROLL	3                       ; { %5 | %25 | %14 | %14 | %23 | %24 | - }
	  ROLL	4                       ; { %5 | %14 | %14 | %23 | %24 | %25 | - }
	  ROLL	4                       ; { %5 | %14 | %23 | %24 | %25 | %14 | - }
	  JMPX                          ; { %5 | %14 | %23 | %24 | %25 | %14 | - } => { %5 | %14 | %23 | %24 | %25 | - }
	}
	PUSHCONT                        ; >%23 = PUSHCONT_MBB %bb.2, 0
                                        ; { %25 | %5 | %24 | %8 | %9 | %10 | %23 | - }
	{
; %bb.2:                                ; %while.end
                                        ; { %5 | %24 | - }
	  SWAP                          ; { %24 | %5 | - }
	  POP	c0                      ; { %24 | - }
                                        ; fallthrough return
	  
	}
	ROLL	5                       ; { %25 | %24 | %8 | %9 | %10 | %23 | %5 | - }
	SWAP                            ; { %25 | %24 | %8 | %9 | %10 | %5 | %23 | - }
	ROLL	5                       ; { %25 | %8 | %9 | %10 | %5 | %23 | %24 | - }
	ROLL	6                       ; { %8 | %9 | %10 | %5 | %23 | %24 | %25 | - }
	ROLL	6                       ; { %9 | %10 | %5 | %23 | %24 | %25 | %8 | - }
	BLKSWAP	2, 5                    ; { %5 | %23 | %24 | %25 | %8 | %9 | %10 | - }
	SWAP                            ; { %5 | %23 | %24 | %25 | %8 | %10 | %9 | - }
	IFELSE                          ; { %5 | %23 | %24 | %25 | %8 | %10 | %9 | - } => { %5 | %23 | %24 | %25 | - }
.Lfunc_end10:
	.size	tonstdlib_log_8, .Lfunc_end10-tonstdlib_log_8
                                        ; -- End function
	.globl	Serialize_Unsigned_Impl ; -- Begin function Serialize_Unsigned_Impl
	.p2align	1
	.type	Serialize_Unsigned_Impl,@function
Serialize_Unsigned_Impl:                ; @Serialize_Unsigned_Impl
; %bb.0:                                ; %entry
                                        ; { %3 | %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %2 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %3 | %2 | %0 | %1 | - }
	XCHG3	s3, s3, s0              ; { %0 | %3 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end11:
	.size	Serialize_Unsigned_Impl, .Lfunc_end11-Serialize_Unsigned_Impl
                                        ; -- End function
	.globl	Serialize_Signed_Impl   ; -- Begin function Serialize_Signed_Impl
	.p2align	1
	.type	Serialize_Signed_Impl,@function
Serialize_Signed_Impl:                  ; @Serialize_Signed_Impl
; %bb.0:                                ; %entry
                                        ; { %3 | %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %2 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %3 | %2 | %0 | %1 | - }
	XCHG3	s3, s3, s0              ; { %0 | %3 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end12:
	.size	Serialize_Signed_Impl, .Lfunc_end12-Serialize_Signed_Impl
                                        ; -- End function
	.globl	Serialize_Unsigned      ; -- Begin function Serialize_Unsigned
	.p2align	1
	.type	Serialize_Unsigned,@function
Serialize_Unsigned:                     ; @Serialize_Unsigned
; %bb.0:                                ; %entry
                                        ; { %4 | %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %4 | %3 | %0 | %1 | - }
	CALL	1                       ; { %4 | %3 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %4 | %3 | %0 | %2 | - }
	XCHG3	s3, s3, s0              ; { %0 | %4 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end13:
	.size	Serialize_Unsigned, .Lfunc_end13-Serialize_Unsigned
                                        ; -- End function
	.globl	Serialize_Signed        ; -- Begin function Serialize_Signed
	.p2align	1
	.type	Serialize_Signed,@function
Serialize_Signed:                       ; @Serialize_Signed
; %bb.0:                                ; %entry
                                        ; { %4 | %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %4 | %3 | %0 | %1 | - }
	CALL	1                       ; { %4 | %3 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %4 | %3 | %0 | %2 | - }
	XCHG3	s3, s3, s0              ; { %0 | %4 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end14:
	.size	Serialize_Signed, .Lfunc_end14-Serialize_Signed
                                        ; -- End function
	.globl	Deserialize_Signed_Impl ; -- Begin function Deserialize_Signed_Impl
	.p2align	1
	.type	Deserialize_Signed_Impl,@function
Deserialize_Signed_Impl:                ; @Deserialize_Signed_Impl
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %2, %1
                                        ; { %0 | %3 | - }
	SWAP                            ; { %3 | %0 | - }
	POP	c0                      ; { %3 | - }
                                        ; fallthrough return
.Lfunc_end15:
	.size	Deserialize_Signed_Impl, .Lfunc_end15-Deserialize_Signed_Impl
                                        ; -- End function
	.globl	Deserialize_Unsigned    ; -- Begin function Deserialize_Unsigned
	.p2align	1
	.type	Deserialize_Unsigned,@function
Deserialize_Unsigned:                   ; @Deserialize_Unsigned
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %2, %1
                                        ; { %0 | %3 | - }
	SWAP                            ; { %3 | %0 | - }
	POP	c0                      ; { %3 | - }
                                        ; fallthrough return
.Lfunc_end16:
	.size	Deserialize_Unsigned, .Lfunc_end16-Deserialize_Unsigned
                                        ; -- End function
	.globl	Deserialize_Signed      ; -- Begin function Deserialize_Signed
	.p2align	1
	.type	Deserialize_Signed,@function
Deserialize_Signed:                     ; @Deserialize_Signed
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %2, %1
                                        ; { %0 | %3 | - }
	SWAP                            ; { %3 | %0 | - }
	POP	c0                      ; { %3 | - }
                                        ; fallthrough return
.Lfunc_end17:
	.size	Deserialize_Signed, .Lfunc_end17-Deserialize_Signed
                                        ; -- End function
	.globl	get_SmartContractInfo   ; -- Begin function get_SmartContractInfo
	.p2align	1
	.type	get_SmartContractInfo,@function
get_SmartContractInfo:                  ; @get_SmartContractInfo
; %bb.0:                                ; %entry
                                        ; { %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %0 | - }
	PUSHINT	$tonstdlib_get_smart_contract_info$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_get_smart_contract_info
                                        ; { %3 | %0 | %1 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	$Deserialize_SmartContractInfo_Impl$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @Deserialize_SmartContractInfo_Impl
                                        ; { %3 | %0 | %2 | - }
	XCHG	s1, s2                  ; { %0 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end18:
	.size	get_SmartContractInfo, .Lfunc_end18-get_SmartContractInfo
                                        ; -- End function
	.globl	Serialize_SmartContractInfo_Impl ; -- Begin function Serialize_SmartContractInfo_Impl
	.p2align	1
	.type	Serialize_SmartContractInfo_Impl,@function
Serialize_SmartContractInfo_Impl:       ; @Serialize_SmartContractInfo_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	124711402               ; >%38 = CONST_I64 124711402
                                        ; { %4 | %0 | %1 | %38 | - }
	PUSHINT	32                      ; >%39 = CONST_I64 32
                                        ; { %4 | %0 | %1 | %38 | %39 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %38 | %39 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	CALL	$:load$                 ; >%5 = CALL_LOAD %4
                                        ; { %4 | %0 | %1 | %5 | - }
	PUSHINT	16                      ; >%40 = CONST_I64 16
                                        ; { %4 | %0 | %1 | %5 | %40 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %5 | %40 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	8               ; >%7 = ADDCONST %4, 8
                                        ; { %4 | %0 | %1 | %7 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %7
                                        ; { %4 | %0 | %1 | %8 | - }
	PUSHINT	16                      ; >%41 = CONST_I64 16
                                        ; { %4 | %0 | %1 | %8 | %41 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %8 | %41 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	16              ; >%9 = ADDCONST %4, 16
                                        ; { %4 | %0 | %1 | %9 | - }
	CALL	$:load$                 ; >%10 = CALL_LOAD %9
                                        ; { %4 | %0 | %1 | %10 | - }
	PUSHINT	32                      ; >%42 = CONST_I64 32
                                        ; { %4 | %0 | %1 | %10 | %42 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %10 | %42 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	24              ; >%11 = ADDCONST %4, 24
                                        ; { %4 | %0 | %1 | %11 | - }
	CALL	$:load$                 ; >%12 = CALL_LOAD %11
                                        ; { %4 | %0 | %1 | %12 | - }
	PUSHINT	64                      ; >%43 = CONST_I64 64
                                        ; { %4 | %0 | %1 | %12 | %43 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %12 | %43 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	32              ; >%14 = ADDCONST %4, 32
                                        ; { %4 | %0 | %1 | %14 | - }
	CALL	$:load$                 ; >%15 = CALL_LOAD %14
                                        ; { %4 | %0 | %1 | %15 | - }
	PUSHINT	64                      ; >%44 = CONST_I64 64
                                        ; { %4 | %0 | %1 | %15 | %44 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %15 | %44 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	40              ; >%16 = ADDCONST %4, 40
                                        ; { %4 | %0 | %1 | %16 | - }
	CALL	$:load$                 ; >%17 = CALL_LOAD %16
                                        ; { %4 | %0 | %1 | %17 | - }
	PUSHINT	256                     ; >%45 = CONST_I64 256
                                        ; { %4 | %0 | %1 | %17 | %45 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %17 | %45 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	48              ; >%19 = ADDCONST %4, 48
                                        ; { %4 | %0 | %1 | %19 | - }
	DUP                             ; { %4 | %0 | %1 | %19 | %19 | - }
	CALL	$:load$                 ; >%21 = CALL_LOAD %19
                                        ; { %4 | %0 | %1 | %19 | %21 | - }
	PUSHINT	4                       ; >%46 = CONST_I64 4
                                        ; { %4 | %0 | %1 | %19 | %21 | %46 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %19 | %21 | %46 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | %19 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %19 | %4 | - }
	ADDCONST	56              ; >%22 = ADDCONST %4, 56
                                        ; { %4 | %0 | %1 | %19 | %22 | - }
	CALL	$:load$                 ; >%23 = CALL_LOAD %22
                                        ; { %4 | %0 | %1 | %19 | %23 | - }
	SWAP                            ; { %4 | %0 | %1 | %23 | %19 | - }
	CALL	$:load$                 ; >%24 = CALL_LOAD %19
                                        ; { %4 | %0 | %1 | %23 | %24 | - }
	LSHIFT	3                       ; >%25 = SHLCONST %24, 3
                                        ; { %4 | %0 | %1 | %23 | %25 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %23 | %25 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	64              ; >%26 = ADDCONST %4, 64
                                        ; { %4 | %0 | %1 | %26 | - }
	CALL	$:load$                 ; >%27 = CALL_LOAD %26
                                        ; { %4 | %0 | %1 | %27 | - }
	PUSHINT	1                       ; >%47 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %27 | %47 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %27 | %47 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%48 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %48 | - }
	PUSHINT	1                       ; >%49 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %48 | %49 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %48 | %49 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSHINT	0                       ; >%50 = CONST_I64 0
                                        ; { %4 | %0 | %1 | %50 | - }
	PUSHINT	1                       ; >%51 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %50 | %51 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %50 | %51 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	72              ; >%30 = ADDCONST %4, 72
                                        ; { %4 | %0 | %1 | %30 | - }
	CALL	$:load$                 ; >%31 = CALL_LOAD %30
                                        ; { %4 | %0 | %1 | %31 | - }
	PUSHINT	1                       ; >%52 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %31 | %52 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %31 | %52 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	80              ; >%32 = ADDCONST %4, 80
                                        ; { %4 | %0 | %1 | %32 | - }
	CALL	$:load$                 ; >%33 = CALL_LOAD %32
                                        ; { %4 | %0 | %1 | %33 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%34 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %4 | %0 | %1 | %33 | %34 | - }
	PUSHINT	8                       ; >%53 = CONST_I64 8
                                        ; { %4 | %0 | %1 | %33 | %34 | %53 | - }
	SWAP                            ; { %4 | %0 | %1 | %33 | %53 | %34 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	XCHG	s0, s2                  ; { %1 | %0 | %4 | - }
	ADDCONST	88              ; >%36 = ADDCONST %4, 88
                                        ; { %1 | %0 | %36 | - }
	CALL	$:load$                 ; >%37 = CALL_LOAD %36
                                        ; { %1 | %0 | %37 | - }
	PUSHINT	256                     ; >%54 = CONST_I64 256
                                        ; { %1 | %0 | %37 | %54 | - }
	XCHG3	s1, s0, s3              ; { %0 | %37 | %54 | %1 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end19:
	.size	Serialize_SmartContractInfo_Impl, .Lfunc_end19-Serialize_SmartContractInfo_Impl
                                        ; -- End function
	.globl	Serialize_CurrencyCollection_Impl ; -- Begin function Serialize_CurrencyCollection_Impl
	.p2align	1
	.type	Serialize_CurrencyCollection_Impl,@function
Serialize_CurrencyCollection_Impl:      ; @Serialize_CurrencyCollection_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	PUSH	s1                      ; { %1 | %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %1 | %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %1 | %0 | %2 | %3 | - }
	PUSHINT	4                       ; >%12 = CONST_I64 4
                                        ; { %1 | %0 | %2 | %3 | %12 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %2 | %12 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	8               ; >%5 = ADDCONST %1, 8
                                        ; { %1 | %0 | %3 | %5 | - }
	CALL	$:load$                 ; >%6 = CALL_LOAD %5
                                        ; { %1 | %0 | %3 | %6 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %6 | %1 | - }
	CALL	$:load$                 ; >%7 = CALL_LOAD %1
                                        ; { %1 | %0 | %3 | %6 | %7 | - }
	LSHIFT	3                       ; >%8 = SHLCONST %7, 3
                                        ; { %1 | %0 | %3 | %6 | %8 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %6 | %8 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	XCHG	s0, s2                  ; { %3 | %0 | %1 | - }
	ADDCONST	16              ; >%9 = ADDCONST %1, 16
                                        ; { %3 | %0 | %9 | - }
	CALL	$:load$                 ; >%10 = CALL_LOAD %9
                                        ; { %3 | %0 | %10 | - }
	PUSHINT	1                       ; >%13 = CONST_I64 1
                                        ; { %3 | %0 | %10 | %13 | - }
	XCHG3	s1, s0, s3              ; { %0 | %10 | %13 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end20:
	.size	Serialize_CurrencyCollection_Impl, .Lfunc_end20-Serialize_CurrencyCollection_Impl
                                        ; -- End function
	.globl	Serialize_MsgAddressInt_Impl ; -- Begin function Serialize_MsgAddressInt_Impl
	.p2align	1
	.type	Serialize_MsgAddressInt_Impl,@function
Serialize_MsgAddressInt_Impl:           ; @Serialize_MsgAddressInt_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%13 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %13 | - }
	PUSHINT	1                       ; >%14 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %13 | %14 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %13 | %14 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSHINT	0                       ; >%15 = CONST_I64 0
                                        ; { %4 | %0 | %1 | %15 | - }
	PUSHINT	1                       ; >%16 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %15 | %16 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %15 | %16 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	CALL	$:load$                 ; >%5 = CALL_LOAD %4
                                        ; { %4 | %0 | %1 | %5 | - }
	PUSHINT	1                       ; >%17 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %5 | %17 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %5 | %17 | %1 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	8               ; >%6 = ADDCONST %4, 8
                                        ; { %4 | %0 | %1 | %6 | - }
	CALL	$:load$                 ; >%7 = CALL_LOAD %6
                                        ; { %4 | %0 | %1 | %7 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%8 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %4 | %0 | %1 | %7 | %8 | - }
	PUSHINT	8                       ; >%18 = CONST_I64 8
                                        ; { %4 | %0 | %1 | %7 | %8 | %18 | - }
	SWAP                            ; { %4 | %0 | %1 | %7 | %18 | %8 | - }
	CALL	1                       ; { %4 | %0 | %1 | - }
	XCHG	s0, s2                  ; { %1 | %0 | %4 | - }
	ADDCONST	16              ; >%10 = ADDCONST %4, 16
                                        ; { %1 | %0 | %10 | - }
	CALL	$:load$                 ; >%11 = CALL_LOAD %10
                                        ; { %1 | %0 | %11 | - }
	PUSHINT	256                     ; >%19 = CONST_I64 256
                                        ; { %1 | %0 | %11 | %19 | - }
	XCHG3	s1, s0, s3              ; { %0 | %11 | %19 | %1 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end21:
	.size	Serialize_MsgAddressInt_Impl, .Lfunc_end21-Serialize_MsgAddressInt_Impl
                                        ; -- End function
	.globl	Serialize_SmartContractInfo ; -- Begin function Serialize_SmartContractInfo
	.p2align	1
	.type	Serialize_SmartContractInfo,@function
Serialize_SmartContractInfo:            ; @Serialize_SmartContractInfo
; %bb.0:                                ; %entry
                                        ; { %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %3 | %0 | %1 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	$Serialize_SmartContractInfo_Impl$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @Serialize_SmartContractInfo_Impl
                                        ; { %3 | %0 | %2 | - }
	XCHG	s1, s2                  ; { %0 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end22:
	.size	Serialize_SmartContractInfo, .Lfunc_end22-Serialize_SmartContractInfo
                                        ; -- End function
	.globl	Deserialize_SmartContractInfo_Impl ; -- Begin function Deserialize_SmartContractInfo_Impl
	.p2align	1
	.type	Deserialize_SmartContractInfo_Impl,@function
Deserialize_SmartContractInfo_Impl:     ; @Deserialize_SmartContractInfo_Impl
; %bb.0:                                ; %entry
                                        ; { %10 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %10 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %10 | %0 | %1 | - }
	PUSHINT	32                      ; >%46 = CONST_I64 32
                                        ; { %10 | %0 | %1 | %46 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %46 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %46, %1
                                        ; { %10 | %0 | %1 | %3 | - }
	PUSHINT	124711402               ; >%47 = CONST_I64 124711402
                                        ; { %10 | %0 | %1 | %3 | %47 | - }
	NEQ                             ; >%5 = NE %3, %47
                                        ; { %10 | %0 | %1 | %5 | - }
	PUSHINT	1                       ; >%48 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %5 | %48 | - }
	AND                             ; >%7 = AND %5, %48
                                        ; { %10 | %0 | %1 | %7 | - }
	THROWIF	59                      ; { %10 | %0 | %1 | - }
	PUSHINT	16                      ; >%49 = CONST_I64 16
                                        ; { %10 | %0 | %1 | %49 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %49 | %1 | - }
	CALL	1                       ; >%9 = CALL_1 %49, %1
                                        ; { %10 | %0 | %1 | %9 | - }
	PUSH	s3                      ; { %10 | %0 | %1 | %9 | %10 | - }
	SWAP                            ; { %10 | %0 | %1 | %10 | %9 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSHINT	16                      ; >%50 = CONST_I64 16
                                        ; { %10 | %0 | %1 | %50 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %50 | %1 | - }
	CALL	1                       ; >%11 = CALL_1 %50, %1
                                        ; { %10 | %0 | %1 | %11 | - }
	PUSH	s3                      ; { %10 | %0 | %1 | %11 | %10 | - }
	ADDCONST	8               ; >%12 = ADDCONST %10, 8
                                        ; { %10 | %0 | %1 | %11 | %12 | - }
	SWAP                            ; { %10 | %0 | %1 | %12 | %11 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSHINT	32                      ; >%51 = CONST_I64 32
                                        ; { %10 | %0 | %1 | %51 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %51 | %1 | - }
	CALL	1                       ; >%13 = CALL_1 %51, %1
                                        ; { %10 | %0 | %1 | %13 | - }
	PUSH	s3                      ; { %10 | %0 | %1 | %13 | %10 | - }
	ADDCONST	16              ; >%14 = ADDCONST %10, 16
                                        ; { %10 | %0 | %1 | %13 | %14 | - }
	SWAP                            ; { %10 | %0 | %1 | %14 | %13 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSH	s2                      ; { %10 | %0 | %1 | %10 | - }
	ADDCONST	24              ; >%15 = ADDCONST %10, 24
                                        ; { %10 | %0 | %1 | %15 | - }
	PUSHINT	64                      ; >%52 = CONST_I64 64
                                        ; { %10 | %0 | %1 | %15 | %52 | - }
	PUSH	s2                      ; { %10 | %0 | %1 | %15 | %52 | %1 | - }
	CALL	1                       ; >%17 = CALL_1 %52, %1
                                        ; { %10 | %0 | %1 | %15 | %17 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSHINT	64                      ; >%53 = CONST_I64 64
                                        ; { %10 | %0 | %1 | %53 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %53 | %1 | - }
	CALL	1                       ; >%18 = CALL_1 %53, %1
                                        ; { %10 | %0 | %1 | %18 | - }
	PUSH	s3                      ; { %10 | %0 | %1 | %18 | %10 | - }
	ADDCONST	32              ; >%19 = ADDCONST %10, 32
                                        ; { %10 | %0 | %1 | %18 | %19 | - }
	SWAP                            ; { %10 | %0 | %1 | %19 | %18 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSH	s2                      ; { %10 | %0 | %1 | %10 | - }
	ADDCONST	40              ; >%20 = ADDCONST %10, 40
                                        ; { %10 | %0 | %1 | %20 | - }
	PUSHINT	256                     ; >%54 = CONST_I64 256
                                        ; { %10 | %0 | %1 | %20 | %54 | - }
	PUSH	s2                      ; { %10 | %0 | %1 | %20 | %54 | %1 | - }
	CALL	1                       ; >%22 = CALL_1 %54, %1
                                        ; { %10 | %0 | %1 | %20 | %22 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSHINT	4                       ; >%55 = CONST_I64 4
                                        ; { %10 | %0 | %1 | %55 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %55 | %1 | - }
	CALL	1                       ; >%24 = CALL_1 %55, %1
                                        ; { %10 | %0 | %1 | %24 | - }
	DUP                             ; { %10 | %0 | %1 | %24 | %24 | - }
	LSHIFT	3                       ; >%25 = SHLCONST %24, 3
                                        ; { %10 | %0 | %1 | %24 | %25 | - }
	PUSH	s2                      ; { %10 | %0 | %1 | %24 | %25 | %1 | - }
	CALL	1                       ; >%26 = CALL_1 %25, %1
                                        ; { %10 | %0 | %1 | %24 | %26 | - }
	PUSH	s4                      ; { %10 | %0 | %1 | %24 | %26 | %10 | - }
	ADDCONST	56              ; >%27 = ADDCONST %10, 56
                                        ; { %10 | %0 | %1 | %24 | %26 | %27 | - }
	PUSHINT	1                       ; >%56 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %24 | %26 | %27 | %56 | - }
	PUSH	s4                      ; { %10 | %0 | %1 | %24 | %26 | %27 | %56 | %1 | - }
	CALL	1                       ; >%28 = CALL_1 %56, %1
                                        ; { %10 | %0 | %1 | %24 | %26 | %27 | %28 | - }
	XCHG	s0, s2                  ; { %10 | %0 | %1 | %24 | %28 | %27 | %26 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | %24 | %28 | - }
	PUSH	s4                      ; { %10 | %0 | %1 | %24 | %28 | %10 | - }
	ADDCONST	48              ; >%29 = ADDCONST %10, 48
                                        ; { %10 | %0 | %1 | %24 | %28 | %29 | - }
	XCHG2	s0, s2                  ; { %10 | %0 | %1 | %28 | %29 | %24 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | %28 | - }
	PUSH	s3                      ; { %10 | %0 | %1 | %28 | %10 | - }
	ADDCONST	64              ; >%30 = ADDCONST %10, 64
                                        ; { %10 | %0 | %1 | %28 | %30 | - }
	SWAP                            ; { %10 | %0 | %1 | %30 | %28 | - }
	CALL	$:store$                ; { %10 | %0 | %1 | - }
	PUSHINT	1                       ; >%57 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %57 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %57 | %1 | - }
	CALL	1                       ; >%31 = CALL_1 %57, %1
                                        ; { %10 | %0 | %1 | %31 | - }
	PUSHINT	1                       ; >%58 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %31 | %58 | - }
	NEQ                             ; >%32 = NE %31, %58
                                        ; { %10 | %0 | %1 | %32 | - }
	PUSHINT	1                       ; >%59 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %32 | %59 | - }
	AND                             ; >%33 = AND %32, %59
                                        ; { %10 | %0 | %1 | %33 | - }
	THROWIF	59                      ; { %10 | %0 | %1 | - }
	PUSHINT	1                       ; >%60 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %60 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %60 | %1 | - }
	CALL	1                       ; >%35 = CALL_1 %60, %1
                                        ; { %10 | %0 | %1 | %35 | - }
	PUSHINT	0                       ; >%61 = CONST_I64 0
                                        ; { %10 | %0 | %1 | %35 | %61 | - }
	NEQ                             ; >%36 = NE %35, %61
                                        ; { %10 | %0 | %1 | %36 | - }
	PUSHINT	1                       ; >%62 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %36 | %62 | - }
	AND                             ; >%37 = AND %36, %62
                                        ; { %10 | %0 | %1 | %37 | - }
	THROWIF	59                      ; { %10 | %0 | %1 | - }
	PUSHINT	1                       ; >%63 = CONST_I64 1
                                        ; { %10 | %0 | %1 | %63 | - }
	PUSH	s1                      ; { %10 | %0 | %1 | %63 | %1 | - }
	CALL	1                       ; >%38 = CALL_1 %63, %1
                                        ; { %10 | %0 | %1 | %38 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%39 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %10 | %0 | %1 | %38 | %39 | - }
	PUSHINT	8                       ; >%64 = CONST_I64 8
                                        ; { %10 | %0 | %1 | %38 | %39 | %64 | - }
	SWAP                            ; { %10 | %0 | %1 | %38 | %64 | %39 | - }
	CALL	1                       ; >%41 = CALL_1 %64, %39
                                        ; { %10 | %0 | %1 | %38 | %41 | - }
	PUSHINT	256                     ; >%65 = CONST_I64 256
                                        ; { %10 | %0 | %1 | %38 | %41 | %65 | - }
	XCHG2	s0, s3                  ; { %10 | %0 | %41 | %38 | %65 | %1 | - }
	CALL	1                       ; >%42 = CALL_1 %65, %1
                                        ; { %10 | %0 | %41 | %38 | %42 | - }
	PUSH	s4                      ; { %10 | %0 | %41 | %38 | %42 | %10 | - }
	ADDCONST	80              ; >%43 = ADDCONST %10, 80
                                        ; { %10 | %0 | %41 | %38 | %42 | %43 | - }
	XCHG2	s0, s3                  ; { %10 | %0 | %42 | %38 | %43 | %41 | - }
	CALL	$:store$                ; { %10 | %0 | %42 | %38 | - }
	PUSH	s3                      ; { %10 | %0 | %42 | %38 | %10 | - }
	ADDCONST	72              ; >%44 = ADDCONST %10, 72
                                        ; { %10 | %0 | %42 | %38 | %44 | - }
	SWAP                            ; { %10 | %0 | %42 | %44 | %38 | - }
	CALL	$:store$                ; { %10 | %0 | %42 | - }
	XCHG	s0, s2                  ; { %42 | %0 | %10 | - }
	ADDCONST	88              ; >%45 = ADDCONST %10, 88
                                        ; { %42 | %0 | %45 | - }
	XCHG2	s0, s2                  ; { %0 | %45 | %42 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end23:
	.size	Deserialize_SmartContractInfo_Impl, .Lfunc_end23-Deserialize_SmartContractInfo_Impl
                                        ; -- End function
	.globl	Deserialize_SmartContractInfo ; -- Begin function Deserialize_SmartContractInfo
	.p2align	1
	.type	Deserialize_SmartContractInfo,@function
Deserialize_SmartContractInfo:          ; @Deserialize_SmartContractInfo
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Deserialize_SmartContractInfo_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Deserialize_SmartContractInfo_Impl
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end24:
	.size	Deserialize_SmartContractInfo, .Lfunc_end24-Deserialize_SmartContractInfo
                                        ; -- End function
	.globl	Serialize_Grams_Impl    ; -- Begin function Serialize_Grams_Impl
	.p2align	1
	.type	Serialize_Grams_Impl,@function
Serialize_Grams_Impl:                   ; @Serialize_Grams_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	PUSH	s1                      ; { %1 | %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %1 | %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %1 | %0 | %2 | %3 | - }
	PUSHINT	4                       ; >%9 = CONST_I64 4
                                        ; { %1 | %0 | %2 | %3 | %9 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %2 | %9 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	8               ; >%5 = ADDCONST %1, 8
                                        ; { %1 | %0 | %3 | %5 | - }
	CALL	$:load$                 ; >%6 = CALL_LOAD %5
                                        ; { %1 | %0 | %3 | %6 | - }
	XCHG	s0, s3                  ; { %6 | %0 | %3 | %1 | - }
	CALL	$:load$                 ; >%7 = CALL_LOAD %1
                                        ; { %6 | %0 | %3 | %7 | - }
	LSHIFT	3                       ; >%8 = SHLCONST %7, 3
                                        ; { %6 | %0 | %3 | %8 | - }
	XCHG3	s3, s0, s0              ; { %0 | %6 | %8 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end25:
	.size	Serialize_Grams_Impl, .Lfunc_end25-Serialize_Grams_Impl
                                        ; -- End function
	.globl	Serialize_Grams         ; -- Begin function Serialize_Grams
	.p2align	1
	.type	Serialize_Grams,@function
Serialize_Grams:                        ; @Serialize_Grams
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %2 | %0 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	PUSH	s1                      ; { %2 | %0 | %2 | - }
	CALL	$:load$                 ; >%3 = CALL_LOAD %2
                                        ; { %2 | %0 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %2 | %0 | %3 | %4 | - }
	PUSHINT	4                       ; >%10 = CONST_I64 4
                                        ; { %2 | %0 | %3 | %4 | %10 | - }
	XC2PU	s2, s0, s2              ; { %2 | %0 | %4 | %3 | %10 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	8               ; >%6 = ADDCONST %2, 8
                                        ; { %2 | %0 | %4 | %6 | - }
	CALL	$:load$                 ; >%7 = CALL_LOAD %6
                                        ; { %2 | %0 | %4 | %7 | - }
	XCHG	s0, s3                  ; { %7 | %0 | %4 | %2 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %2
                                        ; { %7 | %0 | %4 | %8 | - }
	LSHIFT	3                       ; >%9 = SHLCONST %8, 3
                                        ; { %7 | %0 | %4 | %9 | - }
	XCHG3	s3, s0, s0              ; { %0 | %7 | %9 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end26:
	.size	Serialize_Grams, .Lfunc_end26-Serialize_Grams
                                        ; -- End function
	.globl	Deserialize_Grams_Impl  ; -- Begin function Deserialize_Grams_Impl
	.p2align	1
	.type	Deserialize_Grams_Impl,@function
Deserialize_Grams_Impl:                 ; @Deserialize_Grams_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	4                       ; >%8 = CONST_I64 4
                                        ; { %4 | %0 | %1 | %8 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %8 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %8, %1
                                        ; { %4 | %0 | %1 | %3 | - }
	PUSH2	s3, s0                  ; { %4 | %0 | %1 | %3 | %4 | %3 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %3 | - }
	LSHIFT	3                       ; >%5 = SHLCONST %3, 3
                                        ; { %4 | %0 | %1 | %5 | - }
	SWAP                            ; { %4 | %0 | %5 | %1 | - }
	CALL	1                       ; >%6 = CALL_1 %5, %1
                                        ; { %4 | %0 | %6 | - }
	XCHG	s0, s2                  ; { %6 | %0 | %4 | - }
	ADDCONST	8               ; >%7 = ADDCONST %4, 8
                                        ; { %6 | %0 | %7 | - }
	XCHG2	s0, s2                  ; { %0 | %7 | %6 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end27:
	.size	Deserialize_Grams_Impl, .Lfunc_end27-Deserialize_Grams_Impl
                                        ; -- End function
	.globl	Deserialize_Grams       ; -- Begin function Deserialize_Grams
	.p2align	1
	.type	Deserialize_Grams,@function
Deserialize_Grams:                      ; @Deserialize_Grams
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	4                       ; >%9 = CONST_I64 4
                                        ; { %4 | %0 | %1 | %9 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %9 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %9, %1
                                        ; { %4 | %0 | %1 | %3 | - }
	PUSH2	s3, s0                  ; { %4 | %0 | %1 | %3 | %4 | %3 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %3 | - }
	LSHIFT	3                       ; >%5 = SHLCONST %3, 3
                                        ; { %4 | %0 | %1 | %5 | - }
	SWAP                            ; { %4 | %0 | %5 | %1 | - }
	CALL	1                       ; >%6 = CALL_1 %5, %1
                                        ; { %4 | %0 | %6 | - }
	XCHG	s0, s2                  ; { %6 | %0 | %4 | - }
	ADDCONST	8               ; >%7 = ADDCONST %4, 8
                                        ; { %6 | %0 | %7 | - }
	XCHG2	s0, s2                  ; { %0 | %7 | %6 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%8 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %8 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end28:
	.size	Deserialize_Grams, .Lfunc_end28-Deserialize_Grams
                                        ; -- End function
	.globl	Serialize_CurrencyCollection ; -- Begin function Serialize_CurrencyCollection
	.p2align	1
	.type	Serialize_CurrencyCollection,@function
Serialize_CurrencyCollection:           ; @Serialize_CurrencyCollection
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %2 | %0 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	PUSH	s1                      ; { %2 | %0 | %2 | - }
	CALL	$:load$                 ; >%3 = CALL_LOAD %2
                                        ; { %2 | %0 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %2 | %0 | %3 | %4 | - }
	PUSHINT	4                       ; >%13 = CONST_I64 4
                                        ; { %2 | %0 | %3 | %4 | %13 | - }
	XC2PU	s2, s0, s2              ; { %2 | %0 | %4 | %3 | %13 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	8               ; >%6 = ADDCONST %2, 8
                                        ; { %2 | %0 | %4 | %6 | - }
	CALL	$:load$                 ; >%7 = CALL_LOAD %6
                                        ; { %2 | %0 | %4 | %7 | - }
	PUSH	s3                      ; { %2 | %0 | %4 | %7 | %2 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %2
                                        ; { %2 | %0 | %4 | %7 | %8 | - }
	LSHIFT	3                       ; >%9 = SHLCONST %8, 3
                                        ; { %2 | %0 | %4 | %7 | %9 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %7 | %9 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	XCHG	s0, s2                  ; { %4 | %0 | %2 | - }
	ADDCONST	16              ; >%10 = ADDCONST %2, 16
                                        ; { %4 | %0 | %10 | - }
	CALL	$:load$                 ; >%11 = CALL_LOAD %10
                                        ; { %4 | %0 | %11 | - }
	PUSHINT	1                       ; >%14 = CONST_I64 1
                                        ; { %4 | %0 | %11 | %14 | - }
	XCHG3	s1, s0, s3              ; { %0 | %11 | %14 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end29:
	.size	Serialize_CurrencyCollection, .Lfunc_end29-Serialize_CurrencyCollection
                                        ; -- End function
	.globl	Deserialize_CurrencyCollection_Impl ; -- Begin function Deserialize_CurrencyCollection_Impl
	.p2align	1
	.type	Deserialize_CurrencyCollection_Impl,@function
Deserialize_CurrencyCollection_Impl:    ; @Deserialize_CurrencyCollection_Impl
; %bb.0:                                ; %entry
                                        ; { %6 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %6 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %6 | %0 | %1 | - }
	PUSHINT	4                       ; >%11 = CONST_I64 4
                                        ; { %6 | %0 | %1 | %11 | - }
	PUSH	s1                      ; { %6 | %0 | %1 | %11 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %11, %1
                                        ; { %6 | %0 | %1 | %3 | - }
	DUP                             ; { %6 | %0 | %1 | %3 | %3 | - }
	LSHIFT	3                       ; >%4 = SHLCONST %3, 3
                                        ; { %6 | %0 | %1 | %3 | %4 | - }
	PUSH	s2                      ; { %6 | %0 | %1 | %3 | %4 | %1 | - }
	CALL	1                       ; >%5 = CALL_1 %4, %1
                                        ; { %6 | %0 | %1 | %3 | %5 | - }
	PUSH	s4                      ; { %6 | %0 | %1 | %3 | %5 | %6 | - }
	ADDCONST	8               ; >%7 = ADDCONST %6, 8
                                        ; { %6 | %0 | %1 | %3 | %5 | %7 | - }
	SWAP                            ; { %6 | %0 | %1 | %3 | %7 | %5 | - }
	CALL	$:store$                ; { %6 | %0 | %1 | %3 | - }
	PUSH	s3                      ; { %6 | %0 | %1 | %3 | %6 | - }
	SWAP                            ; { %6 | %0 | %1 | %6 | %3 | - }
	CALL	$:store$                ; { %6 | %0 | %1 | - }
	PUSHINT	1                       ; >%12 = CONST_I64 1
                                        ; { %6 | %0 | %1 | %12 | - }
	SWAP                            ; { %6 | %0 | %12 | %1 | - }
	CALL	1                       ; >%9 = CALL_1 %12, %1
                                        ; { %6 | %0 | %9 | - }
	XCHG	s0, s2                  ; { %9 | %0 | %6 | - }
	ADDCONST	16              ; >%10 = ADDCONST %6, 16
                                        ; { %9 | %0 | %10 | - }
	XCHG2	s0, s2                  ; { %0 | %10 | %9 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end30:
	.size	Deserialize_CurrencyCollection_Impl, .Lfunc_end30-Deserialize_CurrencyCollection_Impl
                                        ; -- End function
	.globl	Deserialize_CurrencyCollection ; -- Begin function Deserialize_CurrencyCollection
	.p2align	1
	.type	Deserialize_CurrencyCollection,@function
Deserialize_CurrencyCollection:         ; @Deserialize_CurrencyCollection
; %bb.0:                                ; %entry
                                        ; { %6 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %6 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %6 | %0 | %1 | - }
	PUSHINT	4                       ; >%12 = CONST_I64 4
                                        ; { %6 | %0 | %1 | %12 | - }
	PUSH	s1                      ; { %6 | %0 | %1 | %12 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %12, %1
                                        ; { %6 | %0 | %1 | %3 | - }
	DUP                             ; { %6 | %0 | %1 | %3 | %3 | - }
	LSHIFT	3                       ; >%4 = SHLCONST %3, 3
                                        ; { %6 | %0 | %1 | %3 | %4 | - }
	PUSH	s2                      ; { %6 | %0 | %1 | %3 | %4 | %1 | - }
	CALL	1                       ; >%5 = CALL_1 %4, %1
                                        ; { %6 | %0 | %1 | %3 | %5 | - }
	PUSH	s4                      ; { %6 | %0 | %1 | %3 | %5 | %6 | - }
	ADDCONST	8               ; >%7 = ADDCONST %6, 8
                                        ; { %6 | %0 | %1 | %3 | %5 | %7 | - }
	SWAP                            ; { %6 | %0 | %1 | %3 | %7 | %5 | - }
	CALL	$:store$                ; { %6 | %0 | %1 | %3 | - }
	PUSH	s3                      ; { %6 | %0 | %1 | %3 | %6 | - }
	SWAP                            ; { %6 | %0 | %1 | %6 | %3 | - }
	CALL	$:store$                ; { %6 | %0 | %1 | - }
	PUSHINT	1                       ; >%13 = CONST_I64 1
                                        ; { %6 | %0 | %1 | %13 | - }
	SWAP                            ; { %6 | %0 | %13 | %1 | - }
	CALL	1                       ; >%9 = CALL_1 %13, %1
                                        ; { %6 | %0 | %9 | - }
	XCHG	s0, s2                  ; { %9 | %0 | %6 | - }
	ADDCONST	16              ; >%10 = ADDCONST %6, 16
                                        ; { %9 | %0 | %10 | - }
	XCHG2	s0, s2                  ; { %0 | %10 | %9 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%11 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %11 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end31:
	.size	Deserialize_CurrencyCollection, .Lfunc_end31-Deserialize_CurrencyCollection
                                        ; -- End function
	.globl	Serialize_Bit_Impl      ; -- Begin function Serialize_Bit_Impl
	.p2align	1
	.type	Serialize_Bit_Impl,@function
Serialize_Bit_Impl:                     ; @Serialize_Bit_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	SWAP                            ; { %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %2 | %3 | - }
	PUSHINT	1                       ; >%5 = CONST_I64 1
                                        ; { %0 | %2 | %3 | %5 | - }
	SWAP                            ; { %0 | %2 | %5 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end32:
	.size	Serialize_Bit_Impl, .Lfunc_end32-Serialize_Bit_Impl
                                        ; -- End function
	.globl	Serialize_Bit           ; -- Begin function Serialize_Bit
	.p2align	1
	.type	Serialize_Bit,@function
Serialize_Bit:                          ; @Serialize_Bit
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %2 | %0 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	SWAP                            ; { %0 | %2 | - }
	CALL	$:load$                 ; >%3 = CALL_LOAD %2
                                        ; { %0 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %3 | %4 | - }
	PUSHINT	1                       ; >%6 = CONST_I64 1
                                        ; { %0 | %3 | %4 | %6 | - }
	SWAP                            ; { %0 | %3 | %6 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end33:
	.size	Serialize_Bit, .Lfunc_end33-Serialize_Bit
                                        ; -- End function
	.globl	Deserialize_Bit_Impl    ; -- Begin function Deserialize_Bit_Impl
	.p2align	1
	.type	Deserialize_Bit_Impl,@function
Deserialize_Bit_Impl:                   ; @Deserialize_Bit_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%5 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %5 | - }
	SWAP                            ; { %4 | %0 | %5 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %5, %1
                                        ; { %4 | %0 | %3 | - }
	XCHG	s1, s2                  ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end34:
	.size	Deserialize_Bit_Impl, .Lfunc_end34-Deserialize_Bit_Impl
                                        ; -- End function
	.globl	Deserialize_Bit         ; -- Begin function Deserialize_Bit
	.p2align	1
	.type	Deserialize_Bit,@function
Deserialize_Bit:                        ; @Deserialize_Bit
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%6 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %6 | - }
	SWAP                            ; { %4 | %0 | %6 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %6, %1
                                        ; { %4 | %0 | %3 | - }
	XCHG	s1, s2                  ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%5 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %5 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end35:
	.size	Deserialize_Bit, .Lfunc_end35-Deserialize_Bit
                                        ; -- End function
	.globl	Serialize_Anycast_Impl  ; -- Begin function Serialize_Anycast_Impl
	.p2align	1
	.type	Serialize_Anycast_Impl,@function
Serialize_Anycast_Impl:                 ; @Serialize_Anycast_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	SWAP                            ; { %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %2 | %3 | - }
	PUSHINT	5                       ; >%5 = CONST_I64 5
                                        ; { %0 | %2 | %3 | %5 | - }
	SWAP                            ; { %0 | %2 | %5 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end36:
	.size	Serialize_Anycast_Impl, .Lfunc_end36-Serialize_Anycast_Impl
                                        ; -- End function
	.globl	Serialize_Anycast       ; -- Begin function Serialize_Anycast
	.p2align	1
	.type	Serialize_Anycast,@function
Serialize_Anycast:                      ; @Serialize_Anycast
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %2 | %0 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	SWAP                            ; { %0 | %2 | - }
	CALL	$:load$                 ; >%3 = CALL_LOAD %2
                                        ; { %0 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %3 | %4 | - }
	PUSHINT	5                       ; >%6 = CONST_I64 5
                                        ; { %0 | %3 | %4 | %6 | - }
	SWAP                            ; { %0 | %3 | %6 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end37:
	.size	Serialize_Anycast, .Lfunc_end37-Serialize_Anycast
                                        ; -- End function
	.globl	Deserialize_Anycast_Impl ; -- Begin function Deserialize_Anycast_Impl
	.p2align	1
	.type	Deserialize_Anycast_Impl,@function
Deserialize_Anycast_Impl:               ; @Deserialize_Anycast_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	5                       ; >%5 = CONST_I64 5
                                        ; { %4 | %0 | %1 | %5 | - }
	SWAP                            ; { %4 | %0 | %5 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %5, %1
                                        ; { %4 | %0 | %3 | - }
	XCHG	s1, s2                  ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end38:
	.size	Deserialize_Anycast_Impl, .Lfunc_end38-Deserialize_Anycast_Impl
                                        ; -- End function
	.globl	Deserialize_Anycast     ; -- Begin function Deserialize_Anycast
	.p2align	1
	.type	Deserialize_Anycast,@function
Deserialize_Anycast:                    ; @Deserialize_Anycast
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	5                       ; >%6 = CONST_I64 5
                                        ; { %4 | %0 | %1 | %6 | - }
	SWAP                            ; { %4 | %0 | %6 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %6, %1
                                        ; { %4 | %0 | %3 | - }
	XCHG	s1, s2                  ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%5 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %5 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end39:
	.size	Deserialize_Anycast, .Lfunc_end39-Deserialize_Anycast
                                        ; -- End function
	.globl	Serialize_MsgAddressInt ; -- Begin function Serialize_MsgAddressInt
	.p2align	1
	.type	Serialize_MsgAddressInt,@function
Serialize_MsgAddressInt:                ; @Serialize_MsgAddressInt
; %bb.0:                                ; %entry
                                        ; { %5 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %5 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %5 | %0 | %1 | - }
	CALL	1                       ; { %5 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %5 | %0 | %2 | - }
	PUSHINT	1                       ; >%14 = CONST_I64 1
                                        ; { %5 | %0 | %2 | %14 | - }
	PUSHINT	1                       ; >%15 = CONST_I64 1
                                        ; { %5 | %0 | %2 | %14 | %15 | - }
	PUSH	s2                      ; { %5 | %0 | %2 | %14 | %15 | %2 | - }
	CALL	1                       ; { %5 | %0 | %2 | - }
	PUSHINT	0                       ; >%16 = CONST_I64 0
                                        ; { %5 | %0 | %2 | %16 | - }
	PUSHINT	1                       ; >%17 = CONST_I64 1
                                        ; { %5 | %0 | %2 | %16 | %17 | - }
	PUSH	s2                      ; { %5 | %0 | %2 | %16 | %17 | %2 | - }
	CALL	1                       ; { %5 | %0 | %2 | - }
	PUSH	s2                      ; { %5 | %0 | %2 | %5 | - }
	CALL	$:load$                 ; >%6 = CALL_LOAD %5
                                        ; { %5 | %0 | %2 | %6 | - }
	PUSHINT	1                       ; >%18 = CONST_I64 1
                                        ; { %5 | %0 | %2 | %6 | %18 | - }
	PUSH	s2                      ; { %5 | %0 | %2 | %6 | %18 | %2 | - }
	CALL	1                       ; { %5 | %0 | %2 | - }
	PUSH	s2                      ; { %5 | %0 | %2 | %5 | - }
	ADDCONST	8               ; >%7 = ADDCONST %5, 8
                                        ; { %5 | %0 | %2 | %7 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %7
                                        ; { %5 | %0 | %2 | %8 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%9 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %5 | %0 | %2 | %8 | %9 | - }
	PUSHINT	8                       ; >%19 = CONST_I64 8
                                        ; { %5 | %0 | %2 | %8 | %9 | %19 | - }
	SWAP                            ; { %5 | %0 | %2 | %8 | %19 | %9 | - }
	CALL	1                       ; { %5 | %0 | %2 | - }
	XCHG	s0, s2                  ; { %2 | %0 | %5 | - }
	ADDCONST	16              ; >%11 = ADDCONST %5, 16
                                        ; { %2 | %0 | %11 | - }
	CALL	$:load$                 ; >%12 = CALL_LOAD %11
                                        ; { %2 | %0 | %12 | - }
	PUSHINT	256                     ; >%20 = CONST_I64 256
                                        ; { %2 | %0 | %12 | %20 | - }
	XCHG3	s1, s0, s3              ; { %0 | %12 | %20 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end40:
	.size	Serialize_MsgAddressInt, .Lfunc_end40-Serialize_MsgAddressInt
                                        ; -- End function
	.globl	Deserialize_MsgAddressInt_Impl ; -- Begin function Deserialize_MsgAddressInt_Impl
	.p2align	1
	.type	Deserialize_MsgAddressInt_Impl,@function
Deserialize_MsgAddressInt_Impl:         ; @Deserialize_MsgAddressInt_Impl
; %bb.0:                                ; %entry
                                        ; { %11 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %11 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %11 | %0 | %1 | - }
	PUSHINT	1                       ; >%19 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %19 | - }
	PUSH	s1                      ; { %11 | %0 | %1 | %19 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %19, %1
                                        ; { %11 | %0 | %1 | %3 | - }
	PUSHINT	1                       ; >%20 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %3 | %20 | - }
	NEQ                             ; >%4 = NE %3, %20
                                        ; { %11 | %0 | %1 | %4 | - }
	PUSHINT	1                       ; >%21 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %4 | %21 | - }
	AND                             ; >%5 = AND %4, %21
                                        ; { %11 | %0 | %1 | %5 | - }
	THROWIF	59                      ; { %11 | %0 | %1 | - }
	PUSHINT	1                       ; >%22 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %22 | - }
	PUSH	s1                      ; { %11 | %0 | %1 | %22 | %1 | - }
	CALL	1                       ; >%6 = CALL_1 %22, %1
                                        ; { %11 | %0 | %1 | %6 | - }
	PUSHINT	0                       ; >%23 = CONST_I64 0
                                        ; { %11 | %0 | %1 | %6 | %23 | - }
	NEQ                             ; >%8 = NE %6, %23
                                        ; { %11 | %0 | %1 | %8 | - }
	PUSHINT	1                       ; >%24 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %8 | %24 | - }
	AND                             ; >%9 = AND %8, %24
                                        ; { %11 | %0 | %1 | %9 | - }
	THROWIF	59                      ; { %11 | %0 | %1 | - }
	PUSHINT	1                       ; >%25 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %25 | - }
	PUSH	s1                      ; { %11 | %0 | %1 | %25 | %1 | - }
	CALL	1                       ; >%10 = CALL_1 %25, %1
                                        ; { %11 | %0 | %1 | %10 | - }
	PUSH	s3                      ; { %11 | %0 | %1 | %10 | %11 | - }
	SWAP                            ; { %11 | %0 | %1 | %11 | %10 | - }
	CALL	$:store$                ; { %11 | %0 | %1 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %11 | %0 | %1 | %12 | - }
	PUSHINT	8                       ; >%26 = CONST_I64 8
                                        ; { %11 | %0 | %1 | %12 | %26 | - }
	SWAP                            ; { %11 | %0 | %1 | %26 | %12 | - }
	CALL	1                       ; >%14 = CALL_1 %26, %12
                                        ; { %11 | %0 | %1 | %14 | - }
	PUSH	s3                      ; { %11 | %0 | %1 | %14 | %11 | - }
	ADDCONST	8               ; >%15 = ADDCONST %11, 8
                                        ; { %11 | %0 | %1 | %14 | %15 | - }
	SWAP                            ; { %11 | %0 | %1 | %15 | %14 | - }
	CALL	$:store$                ; { %11 | %0 | %1 | - }
	PUSHINT	256                     ; >%27 = CONST_I64 256
                                        ; { %11 | %0 | %1 | %27 | - }
	SWAP                            ; { %11 | %0 | %27 | %1 | - }
	CALL	1                       ; >%17 = CALL_1 %27, %1
                                        ; { %11 | %0 | %17 | - }
	XCHG	s0, s2                  ; { %17 | %0 | %11 | - }
	ADDCONST	16              ; >%18 = ADDCONST %11, 16
                                        ; { %17 | %0 | %18 | - }
	XCHG2	s0, s2                  ; { %0 | %18 | %17 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end41:
	.size	Deserialize_MsgAddressInt_Impl, .Lfunc_end41-Deserialize_MsgAddressInt_Impl
                                        ; -- End function
	.globl	Deserialize_MsgAddressInt ; -- Begin function Deserialize_MsgAddressInt
	.p2align	1
	.type	Deserialize_MsgAddressInt,@function
Deserialize_MsgAddressInt:              ; @Deserialize_MsgAddressInt
; %bb.0:                                ; %entry
                                        ; { %11 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %11 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %11 | %0 | %1 | - }
	PUSHINT	1                       ; >%20 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %20 | - }
	PUSH	s1                      ; { %11 | %0 | %1 | %20 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %20, %1
                                        ; { %11 | %0 | %1 | %3 | - }
	PUSHINT	1                       ; >%21 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %3 | %21 | - }
	NEQ                             ; >%4 = NE %3, %21
                                        ; { %11 | %0 | %1 | %4 | - }
	PUSHINT	1                       ; >%22 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %4 | %22 | - }
	AND                             ; >%5 = AND %4, %22
                                        ; { %11 | %0 | %1 | %5 | - }
	THROWIF	59                      ; { %11 | %0 | %1 | - }
	PUSHINT	1                       ; >%23 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %23 | - }
	PUSH	s1                      ; { %11 | %0 | %1 | %23 | %1 | - }
	CALL	1                       ; >%6 = CALL_1 %23, %1
                                        ; { %11 | %0 | %1 | %6 | - }
	PUSHINT	0                       ; >%24 = CONST_I64 0
                                        ; { %11 | %0 | %1 | %6 | %24 | - }
	NEQ                             ; >%8 = NE %6, %24
                                        ; { %11 | %0 | %1 | %8 | - }
	PUSHINT	1                       ; >%25 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %8 | %25 | - }
	AND                             ; >%9 = AND %8, %25
                                        ; { %11 | %0 | %1 | %9 | - }
	THROWIF	59                      ; { %11 | %0 | %1 | - }
	PUSHINT	1                       ; >%26 = CONST_I64 1
                                        ; { %11 | %0 | %1 | %26 | - }
	PUSH	s1                      ; { %11 | %0 | %1 | %26 | %1 | - }
	CALL	1                       ; >%10 = CALL_1 %26, %1
                                        ; { %11 | %0 | %1 | %10 | - }
	PUSH	s3                      ; { %11 | %0 | %1 | %10 | %11 | - }
	SWAP                            ; { %11 | %0 | %1 | %11 | %10 | - }
	CALL	$:store$                ; { %11 | %0 | %1 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %11 | %0 | %1 | %12 | - }
	PUSHINT	8                       ; >%27 = CONST_I64 8
                                        ; { %11 | %0 | %1 | %12 | %27 | - }
	SWAP                            ; { %11 | %0 | %1 | %27 | %12 | - }
	CALL	1                       ; >%14 = CALL_1 %27, %12
                                        ; { %11 | %0 | %1 | %14 | - }
	PUSH	s3                      ; { %11 | %0 | %1 | %14 | %11 | - }
	ADDCONST	8               ; >%15 = ADDCONST %11, 8
                                        ; { %11 | %0 | %1 | %14 | %15 | - }
	SWAP                            ; { %11 | %0 | %1 | %15 | %14 | - }
	CALL	$:store$                ; { %11 | %0 | %1 | - }
	PUSHINT	256                     ; >%28 = CONST_I64 256
                                        ; { %11 | %0 | %1 | %28 | - }
	SWAP                            ; { %11 | %0 | %28 | %1 | - }
	CALL	1                       ; >%17 = CALL_1 %28, %1
                                        ; { %11 | %0 | %17 | - }
	XCHG	s0, s2                  ; { %17 | %0 | %11 | - }
	ADDCONST	16              ; >%18 = ADDCONST %11, 16
                                        ; { %17 | %0 | %18 | - }
	XCHG2	s0, s2                  ; { %0 | %18 | %17 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%19 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %19 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end42:
	.size	Deserialize_MsgAddressInt, .Lfunc_end42-Deserialize_MsgAddressInt
                                        ; -- End function
	.globl	Serialize_MsgAddressExt_Impl ; -- Begin function Serialize_MsgAddressExt_Impl
	.p2align	1
	.type	Serialize_MsgAddressExt_Impl,@function
Serialize_MsgAddressExt_Impl:           ; @Serialize_MsgAddressExt_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	SWAP                            ; { %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %2 | %3 | - }
	PUSHINT	2                       ; >%5 = CONST_I64 2
                                        ; { %0 | %2 | %3 | %5 | - }
	SWAP                            ; { %0 | %2 | %5 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end43:
	.size	Serialize_MsgAddressExt_Impl, .Lfunc_end43-Serialize_MsgAddressExt_Impl
                                        ; -- End function
	.globl	Serialize_MsgAddressExt ; -- Begin function Serialize_MsgAddressExt
	.p2align	1
	.type	Serialize_MsgAddressExt,@function
Serialize_MsgAddressExt:                ; @Serialize_MsgAddressExt
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %2 | %0 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	SWAP                            ; { %0 | %2 | - }
	CALL	$:load$                 ; >%3 = CALL_LOAD %2
                                        ; { %0 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %3 | %4 | - }
	PUSHINT	2                       ; >%6 = CONST_I64 2
                                        ; { %0 | %3 | %4 | %6 | - }
	SWAP                            ; { %0 | %3 | %6 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end44:
	.size	Serialize_MsgAddressExt, .Lfunc_end44-Serialize_MsgAddressExt
                                        ; -- End function
	.globl	Deserialize_MsgAddressExt_Impl ; -- Begin function Deserialize_MsgAddressExt_Impl
	.p2align	1
	.type	Deserialize_MsgAddressExt_Impl,@function
Deserialize_MsgAddressExt_Impl:         ; @Deserialize_MsgAddressExt_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	2                       ; >%5 = CONST_I64 2
                                        ; { %4 | %0 | %1 | %5 | - }
	SWAP                            ; { %4 | %0 | %5 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %5, %1
                                        ; { %4 | %0 | %3 | - }
	XCHG	s1, s2                  ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end45:
	.size	Deserialize_MsgAddressExt_Impl, .Lfunc_end45-Deserialize_MsgAddressExt_Impl
                                        ; -- End function
	.globl	Deserialize_MsgAddressExt ; -- Begin function Deserialize_MsgAddressExt
	.p2align	1
	.type	Deserialize_MsgAddressExt,@function
Deserialize_MsgAddressExt:              ; @Deserialize_MsgAddressExt
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	2                       ; >%6 = CONST_I64 2
                                        ; { %4 | %0 | %1 | %6 | - }
	SWAP                            ; { %4 | %0 | %6 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %6, %1
                                        ; { %4 | %0 | %3 | - }
	XCHG	s1, s2                  ; { %0 | %4 | %3 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%5 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %5 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end46:
	.size	Deserialize_MsgAddressExt, .Lfunc_end46-Deserialize_MsgAddressExt
                                        ; -- End function
	.globl	Serialize_CommonMsgInfo_Impl ; -- Begin function Serialize_CommonMsgInfo_Impl
	.p2align	1
	.type	Serialize_CommonMsgInfo_Impl,@function
Serialize_CommonMsgInfo_Impl:           ; @Serialize_CommonMsgInfo_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	PUSH	s1                      ; { %1 | %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %1 | %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %1 | %0 | %2 | %3 | - }
	PUSHINT	1                       ; >%61 = CONST_I64 1
                                        ; { %1 | %0 | %2 | %3 | %61 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %2 | %61 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	8               ; >%5 = ADDCONST %1, 8
                                        ; { %1 | %0 | %3 | %5 | - }
	CALL	$:load$                 ; >%6 = CALL_LOAD %5
                                        ; { %1 | %0 | %3 | %6 | - }
	PUSHINT	1                       ; >%62 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %6 | %62 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %6 | %62 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	16              ; >%7 = ADDCONST %1, 16
                                        ; { %1 | %0 | %3 | %7 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %7
                                        ; { %1 | %0 | %3 | %8 | - }
	PUSHINT	1                       ; >%63 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %8 | %63 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %8 | %63 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	24              ; >%9 = ADDCONST %1, 24
                                        ; { %1 | %0 | %3 | %9 | - }
	CALL	$:load$                 ; >%10 = CALL_LOAD %9
                                        ; { %1 | %0 | %3 | %10 | - }
	PUSHINT	1                       ; >%64 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %10 | %64 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %10 | %64 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	1                       ; >%65 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %65 | - }
	PUSHINT	1                       ; >%66 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %65 | %66 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %65 | %66 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	0                       ; >%67 = CONST_I64 0
                                        ; { %1 | %0 | %3 | %67 | - }
	PUSHINT	1                       ; >%68 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %67 | %68 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %67 | %68 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	32              ; >%12 = ADDCONST %1, 32
                                        ; { %1 | %0 | %3 | %12 | - }
	CALL	$:load$                 ; >%13 = CALL_LOAD %12
                                        ; { %1 | %0 | %3 | %13 | - }
	PUSHINT	1                       ; >%69 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %13 | %69 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %13 | %69 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	40              ; >%14 = ADDCONST %1, 40
                                        ; { %1 | %0 | %3 | %14 | - }
	CALL	$:load$                 ; >%15 = CALL_LOAD %14
                                        ; { %1 | %0 | %3 | %15 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%16 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %1 | %0 | %3 | %15 | %16 | - }
	PUSHINT	8                       ; >%70 = CONST_I64 8
                                        ; { %1 | %0 | %3 | %15 | %16 | %70 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %16 | %15 | %70 | %16 | - }
	CALL	1                       ; { %1 | %0 | %3 | %16 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %1 | - }
	ADDCONST	48              ; >%18 = ADDCONST %1, 48
                                        ; { %1 | %0 | %3 | %16 | %18 | - }
	CALL	$:load$                 ; >%19 = CALL_LOAD %18
                                        ; { %1 | %0 | %3 | %16 | %19 | - }
	PUSHINT	256                     ; >%71 = CONST_I64 256
                                        ; { %1 | %0 | %3 | %16 | %19 | %71 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %19 | %71 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %16 | - }
	PUSHINT	1                       ; >%72 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %16 | %72 | - }
	PUSHINT	1                       ; >%73 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %16 | %72 | %73 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %72 | %73 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %16 | - }
	PUSHINT	0                       ; >%74 = CONST_I64 0
                                        ; { %1 | %0 | %3 | %16 | %74 | - }
	PUSHINT	1                       ; >%75 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %16 | %74 | %75 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %74 | %75 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %16 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %1 | - }
	ADDCONST	56              ; >%21 = ADDCONST %1, 56
                                        ; { %1 | %0 | %3 | %16 | %21 | - }
	CALL	$:load$                 ; >%22 = CALL_LOAD %21
                                        ; { %1 | %0 | %3 | %16 | %22 | - }
	PUSHINT	1                       ; >%76 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %16 | %22 | %76 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %22 | %76 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %16 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %16 | %1 | - }
	ADDCONST	64              ; >%23 = ADDCONST %1, 64
                                        ; { %1 | %0 | %3 | %16 | %23 | - }
	CALL	$:load$                 ; >%24 = CALL_LOAD %23
                                        ; { %1 | %0 | %3 | %16 | %24 | - }
	PUSHINT	8                       ; >%77 = CONST_I64 8
                                        ; { %1 | %0 | %3 | %16 | %24 | %77 | - }
	BLKSWAP	1, 2                    ; { %1 | %0 | %3 | %24 | %77 | %16 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	72              ; >%25 = ADDCONST %1, 72
                                        ; { %1 | %0 | %3 | %25 | - }
	CALL	$:load$                 ; >%26 = CALL_LOAD %25
                                        ; { %1 | %0 | %3 | %26 | - }
	PUSHINT	256                     ; >%78 = CONST_I64 256
                                        ; { %1 | %0 | %3 | %26 | %78 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %26 | %78 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	80              ; >%27 = ADDCONST %1, 80
                                        ; { %1 | %0 | %3 | %27 | - }
	DUP                             ; { %1 | %0 | %3 | %27 | %27 | - }
	CALL	$:load$                 ; >%29 = CALL_LOAD %27
                                        ; { %1 | %0 | %3 | %27 | %29 | - }
	PUSHINT	4                       ; >%79 = CONST_I64 4
                                        ; { %1 | %0 | %3 | %27 | %29 | %79 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %27 | %29 | %79 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %27 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %27 | %1 | - }
	ADDCONST	88              ; >%30 = ADDCONST %1, 88
                                        ; { %1 | %0 | %3 | %27 | %30 | - }
	CALL	$:load$                 ; >%31 = CALL_LOAD %30
                                        ; { %1 | %0 | %3 | %27 | %31 | - }
	SWAP                            ; { %1 | %0 | %3 | %31 | %27 | - }
	CALL	$:load$                 ; >%32 = CALL_LOAD %27
                                        ; { %1 | %0 | %3 | %31 | %32 | - }
	LSHIFT	3                       ; >%33 = SHLCONST %32, 3
                                        ; { %1 | %0 | %3 | %31 | %33 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %31 | %33 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	96              ; >%34 = ADDCONST %1, 96
                                        ; { %1 | %0 | %3 | %34 | - }
	CALL	$:load$                 ; >%35 = CALL_LOAD %34
                                        ; { %1 | %0 | %3 | %35 | - }
	PUSHINT	1                       ; >%80 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %35 | %80 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %35 | %80 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	104             ; >%36 = ADDCONST %1, 104
                                        ; { %1 | %0 | %3 | %36 | - }
	DUP                             ; { %1 | %0 | %3 | %36 | %36 | - }
	CALL	$:load$                 ; >%37 = CALL_LOAD %36
                                        ; { %1 | %0 | %3 | %36 | %37 | - }
	PUSHINT	4                       ; >%81 = CONST_I64 4
                                        ; { %1 | %0 | %3 | %36 | %37 | %81 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %36 | %37 | %81 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %36 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %36 | %1 | - }
	ADDCONST	112             ; >%38 = ADDCONST %1, 112
                                        ; { %1 | %0 | %3 | %36 | %38 | - }
	CALL	$:load$                 ; >%39 = CALL_LOAD %38
                                        ; { %1 | %0 | %3 | %36 | %39 | - }
	SWAP                            ; { %1 | %0 | %3 | %39 | %36 | - }
	CALL	$:load$                 ; >%40 = CALL_LOAD %36
                                        ; { %1 | %0 | %3 | %39 | %40 | - }
	LSHIFT	3                       ; >%41 = SHLCONST %40, 3
                                        ; { %1 | %0 | %3 | %39 | %41 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %39 | %41 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	120             ; >%42 = ADDCONST %1, 120
                                        ; { %1 | %0 | %3 | %42 | - }
	DUP                             ; { %1 | %0 | %3 | %42 | %42 | - }
	CALL	$:load$                 ; >%43 = CALL_LOAD %42
                                        ; { %1 | %0 | %3 | %42 | %43 | - }
	PUSHINT	4                       ; >%82 = CONST_I64 4
                                        ; { %1 | %0 | %3 | %42 | %43 | %82 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %42 | %43 | %82 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %42 | - }
	PUSHINT	128                     ; >%83 = CONST_I64 128
                                        ; { %1 | %0 | %3 | %42 | %83 | - }
	PUSH	s4                      ; { %1 | %0 | %3 | %42 | %83 | %1 | - }
	SWAP                            ; { %1 | %0 | %3 | %42 | %1 | %83 | - }
	ADD                             ; >%45 = ADD %1, %83
                                        ; { %1 | %0 | %3 | %42 | %45 | - }
	CALL	$:load$                 ; >%46 = CALL_LOAD %45
                                        ; { %1 | %0 | %3 | %42 | %46 | - }
	SWAP                            ; { %1 | %0 | %3 | %46 | %42 | - }
	CALL	$:load$                 ; >%47 = CALL_LOAD %42
                                        ; { %1 | %0 | %3 | %46 | %47 | - }
	LSHIFT	3                       ; >%48 = SHLCONST %47, 3
                                        ; { %1 | %0 | %3 | %46 | %48 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %46 | %48 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	136                     ; >%84 = CONST_I64 136
                                        ; { %1 | %0 | %3 | %84 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %84 | %1 | - }
	SWAP                            ; { %1 | %0 | %3 | %1 | %84 | - }
	ADD                             ; >%50 = ADD %1, %84
                                        ; { %1 | %0 | %3 | %50 | - }
	CALL	$:load$                 ; >%51 = CALL_LOAD %50
                                        ; { %1 | %0 | %3 | %51 | - }
	PUSHINT	64                      ; >%85 = CONST_I64 64
                                        ; { %1 | %0 | %3 | %51 | %85 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %51 | %85 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	144                     ; >%86 = CONST_I64 144
                                        ; { %1 | %0 | %3 | %86 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %86 | %1 | - }
	SWAP                            ; { %1 | %0 | %3 | %1 | %86 | - }
	ADD                             ; >%54 = ADD %1, %86
                                        ; { %1 | %0 | %3 | %54 | - }
	CALL	$:load$                 ; >%55 = CALL_LOAD %54
                                        ; { %1 | %0 | %3 | %55 | - }
	PUSHINT	32                      ; >%87 = CONST_I64 32
                                        ; { %1 | %0 | %3 | %55 | %87 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %55 | %87 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	152                     ; >%88 = CONST_I64 152
                                        ; { %1 | %0 | %3 | %88 | - }
	XCHG	s1, s3                  ; { %3 | %0 | %1 | %88 | - }
	ADD                             ; >%58 = ADD %1, %88
                                        ; { %3 | %0 | %58 | - }
	CALL	$:load$                 ; >%59 = CALL_LOAD %58
                                        ; { %3 | %0 | %59 | - }
	PUSHINT	16                      ; >%89 = CONST_I64 16
                                        ; { %3 | %0 | %59 | %89 | - }
	XCHG3	s1, s0, s3              ; { %0 | %59 | %89 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end47:
	.size	Serialize_CommonMsgInfo_Impl, .Lfunc_end47-Serialize_CommonMsgInfo_Impl
                                        ; -- End function
	.globl	Serialize_CommonMsgInfo ; -- Begin function Serialize_CommonMsgInfo
	.p2align	1
	.type	Serialize_CommonMsgInfo,@function
Serialize_CommonMsgInfo:                ; @Serialize_CommonMsgInfo
; %bb.0:                                ; %entry
                                        ; { %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %3 | %0 | %1 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	$Serialize_CommonMsgInfo_Impl$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @Serialize_CommonMsgInfo_Impl
                                        ; { %3 | %0 | %2 | - }
	XCHG	s1, s2                  ; { %0 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end48:
	.size	Serialize_CommonMsgInfo, .Lfunc_end48-Serialize_CommonMsgInfo
                                        ; -- End function
	.globl	Deserialize_CommonMsgInfo_Impl ; -- Begin function Deserialize_CommonMsgInfo_Impl
	.p2align	1
	.type	Deserialize_CommonMsgInfo_Impl,@function
Deserialize_CommonMsgInfo_Impl:         ; @Deserialize_CommonMsgInfo_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%70 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %70 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %70 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %70, %1
                                        ; { %4 | %0 | %1 | %3 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %3 | %4 | - }
	SWAP                            ; { %4 | %0 | %1 | %4 | %3 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%71 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %71 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %71 | %1 | - }
	CALL	1                       ; >%5 = CALL_1 %71, %1
                                        ; { %4 | %0 | %1 | %5 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %5 | %4 | - }
	ADDCONST	8               ; >%6 = ADDCONST %4, 8
                                        ; { %4 | %0 | %1 | %5 | %6 | - }
	SWAP                            ; { %4 | %0 | %1 | %6 | %5 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%72 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %72 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %72 | %1 | - }
	CALL	1                       ; >%7 = CALL_1 %72, %1
                                        ; { %4 | %0 | %1 | %7 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %7 | %4 | - }
	ADDCONST	16              ; >%8 = ADDCONST %4, 16
                                        ; { %4 | %0 | %1 | %7 | %8 | - }
	SWAP                            ; { %4 | %0 | %1 | %8 | %7 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	24              ; >%9 = ADDCONST %4, 24
                                        ; { %4 | %0 | %1 | %9 | - }
	PUSHINT	1                       ; >%73 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %9 | %73 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %9 | %73 | %1 | - }
	CALL	1                       ; >%10 = CALL_1 %73, %1
                                        ; { %4 | %0 | %1 | %9 | %10 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%74 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %74 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %74 | %1 | - }
	CALL	1                       ; >%11 = CALL_1 %74, %1
                                        ; { %4 | %0 | %1 | %11 | - }
	PUSHINT	1                       ; >%75 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %11 | %75 | - }
	NEQ                             ; >%12 = NE %11, %75
                                        ; { %4 | %0 | %1 | %12 | - }
	PUSHINT	1                       ; >%76 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %12 | %76 | - }
	AND                             ; >%13 = AND %12, %76
                                        ; { %4 | %0 | %1 | %13 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%77 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %77 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %77 | %1 | - }
	CALL	1                       ; >%15 = CALL_1 %77, %1
                                        ; { %4 | %0 | %1 | %15 | - }
	PUSHINT	0                       ; >%78 = CONST_I64 0
                                        ; { %4 | %0 | %1 | %15 | %78 | - }
	NEQ                             ; >%16 = NE %15, %78
                                        ; { %4 | %0 | %1 | %16 | - }
	PUSHINT	1                       ; >%79 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %16 | %79 | - }
	AND                             ; >%17 = AND %16, %79
                                        ; { %4 | %0 | %1 | %17 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %4 | - }
	ADDCONST	40              ; >%18 = ADDCONST %4, 40
                                        ; { %4 | %0 | %1 | %18 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%20 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %4 | %0 | %1 | %18 | %20 | - }
	PUSHINT	1                       ; >%80 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %18 | %20 | %80 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %18 | %20 | %80 | %1 | - }
	CALL	1                       ; >%22 = CALL_1 %80, %1
                                        ; { %4 | %0 | %1 | %18 | %20 | %22 | - }
	PUSHINT	8                       ; >%81 = CONST_I64 8
                                        ; { %4 | %0 | %1 | %18 | %20 | %22 | %81 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %18 | %20 | %22 | %81 | %20 | - }
	CALL	1                       ; >%23 = CALL_1 %81, %20
                                        ; { %4 | %0 | %1 | %18 | %20 | %22 | %23 | - }
	PUSHINT	256                     ; >%82 = CONST_I64 256
                                        ; { %4 | %0 | %1 | %18 | %20 | %22 | %23 | %82 | - }
	PUSH	s5                      ; { %4 | %0 | %1 | %18 | %20 | %22 | %23 | %82 | %1 | - }
	CALL	1                       ; >%24 = CALL_1 %82, %1
                                        ; { %4 | %0 | %1 | %18 | %20 | %22 | %23 | %24 | - }
	XCHG2	s4, s4                  ; { %4 | %0 | %1 | %24 | %20 | %22 | %18 | %23 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %24 | %20 | %22 | - }
	PUSH	s5                      ; { %4 | %0 | %1 | %24 | %20 | %22 | %4 | - }
	ADDCONST	32              ; >%25 = ADDCONST %4, 32
                                        ; { %4 | %0 | %1 | %24 | %20 | %22 | %25 | - }
	SWAP                            ; { %4 | %0 | %1 | %24 | %20 | %25 | %22 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %24 | %20 | - }
	PUSH	s4                      ; { %4 | %0 | %1 | %24 | %20 | %4 | - }
	ADDCONST	48              ; >%26 = ADDCONST %4, 48
                                        ; { %4 | %0 | %1 | %24 | %20 | %26 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %20 | %26 | %24 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %20 | - }
	PUSHINT	1                       ; >%83 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %20 | %83 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %20 | %83 | %1 | - }
	CALL	1                       ; >%27 = CALL_1 %83, %1
                                        ; { %4 | %0 | %1 | %20 | %27 | - }
	PUSHINT	1                       ; >%84 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %20 | %27 | %84 | - }
	NEQ                             ; >%28 = NE %27, %84
                                        ; { %4 | %0 | %1 | %20 | %28 | - }
	PUSHINT	1                       ; >%85 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %20 | %28 | %85 | - }
	AND                             ; >%29 = AND %28, %85
                                        ; { %4 | %0 | %1 | %20 | %29 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | %20 | - }
	PUSHINT	1                       ; >%86 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %20 | %86 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %20 | %86 | %1 | - }
	CALL	1                       ; >%30 = CALL_1 %86, %1
                                        ; { %4 | %0 | %1 | %20 | %30 | - }
	PUSHINT	0                       ; >%87 = CONST_I64 0
                                        ; { %4 | %0 | %1 | %20 | %30 | %87 | - }
	NEQ                             ; >%31 = NE %30, %87
                                        ; { %4 | %0 | %1 | %20 | %31 | - }
	PUSHINT	1                       ; >%88 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %20 | %31 | %88 | - }
	AND                             ; >%32 = AND %31, %88
                                        ; { %4 | %0 | %1 | %20 | %32 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | %20 | - }
	PUSHINT	1                       ; >%89 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %20 | %89 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %20 | %89 | %1 | - }
	CALL	1                       ; >%33 = CALL_1 %89, %1
                                        ; { %4 | %0 | %1 | %20 | %33 | - }
	PUSHINT	8                       ; >%90 = CONST_I64 8
                                        ; { %4 | %0 | %1 | %20 | %33 | %90 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %33 | %90 | %20 | - }
	CALL	1                       ; >%34 = CALL_1 %90, %20
                                        ; { %4 | %0 | %1 | %33 | %34 | - }
	PUSHINT	256                     ; >%91 = CONST_I64 256
                                        ; { %4 | %0 | %1 | %33 | %34 | %91 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %33 | %34 | %91 | %1 | - }
	CALL	1                       ; >%35 = CALL_1 %91, %1
                                        ; { %4 | %0 | %1 | %33 | %34 | %35 | - }
	PUSH	s5                      ; { %4 | %0 | %1 | %33 | %34 | %35 | %4 | - }
	ADDCONST	64              ; >%36 = ADDCONST %4, 64
                                        ; { %4 | %0 | %1 | %33 | %34 | %35 | %36 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %33 | %35 | %36 | %34 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %33 | %35 | - }
	PUSH	s4                      ; { %4 | %0 | %1 | %33 | %35 | %4 | - }
	ADDCONST	56              ; >%37 = ADDCONST %4, 56
                                        ; { %4 | %0 | %1 | %33 | %35 | %37 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %35 | %37 | %33 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %35 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %35 | %4 | - }
	ADDCONST	72              ; >%38 = ADDCONST %4, 72
                                        ; { %4 | %0 | %1 | %35 | %38 | - }
	SWAP                            ; { %4 | %0 | %1 | %38 | %35 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	4                       ; >%92 = CONST_I64 4
                                        ; { %4 | %0 | %1 | %92 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %92 | %1 | - }
	CALL	1                       ; >%40 = CALL_1 %92, %1
                                        ; { %4 | %0 | %1 | %40 | - }
	DUP                             ; { %4 | %0 | %1 | %40 | %40 | - }
	LSHIFT	3                       ; >%41 = SHLCONST %40, 3
                                        ; { %4 | %0 | %1 | %40 | %41 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %40 | %41 | %1 | - }
	CALL	1                       ; >%42 = CALL_1 %41, %1
                                        ; { %4 | %0 | %1 | %40 | %42 | - }
	PUSHINT	1                       ; >%93 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %40 | %42 | %93 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %40 | %42 | %93 | %1 | - }
	CALL	1                       ; >%43 = CALL_1 %93, %1
                                        ; { %4 | %0 | %1 | %40 | %42 | %43 | - }
	PUSH	s5                      ; { %4 | %0 | %1 | %40 | %42 | %43 | %4 | - }
	ADDCONST	88              ; >%44 = ADDCONST %4, 88
                                        ; { %4 | %0 | %1 | %40 | %42 | %43 | %44 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %40 | %43 | %44 | %42 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %40 | %43 | - }
	PUSH	s4                      ; { %4 | %0 | %1 | %40 | %43 | %4 | - }
	ADDCONST	80              ; >%45 = ADDCONST %4, 80
                                        ; { %4 | %0 | %1 | %40 | %43 | %45 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %43 | %45 | %40 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %43 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %43 | %4 | - }
	ADDCONST	96              ; >%46 = ADDCONST %4, 96
                                        ; { %4 | %0 | %1 | %43 | %46 | - }
	SWAP                            ; { %4 | %0 | %1 | %46 | %43 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	4                       ; >%94 = CONST_I64 4
                                        ; { %4 | %0 | %1 | %94 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %94 | %1 | - }
	CALL	1                       ; >%47 = CALL_1 %94, %1
                                        ; { %4 | %0 | %1 | %47 | - }
	DUP                             ; { %4 | %0 | %1 | %47 | %47 | - }
	LSHIFT	3                       ; >%48 = SHLCONST %47, 3
                                        ; { %4 | %0 | %1 | %47 | %48 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %47 | %48 | %1 | - }
	CALL	1                       ; >%49 = CALL_1 %48, %1
                                        ; { %4 | %0 | %1 | %47 | %49 | - }
	PUSH	s4                      ; { %4 | %0 | %1 | %47 | %49 | %4 | - }
	ADDCONST	112             ; >%50 = ADDCONST %4, 112
                                        ; { %4 | %0 | %1 | %47 | %49 | %50 | - }
	SWAP                            ; { %4 | %0 | %1 | %47 | %50 | %49 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %47 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %47 | %4 | - }
	ADDCONST	104             ; >%51 = ADDCONST %4, 104
                                        ; { %4 | %0 | %1 | %47 | %51 | - }
	SWAP                            ; { %4 | %0 | %1 | %51 | %47 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	128                     ; >%95 = CONST_I64 128
                                        ; { %4 | %0 | %1 | %95 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %95 | %4 | - }
	SWAP                            ; { %4 | %0 | %1 | %4 | %95 | - }
	ADD                             ; >%53 = ADD %4, %95
                                        ; { %4 | %0 | %1 | %53 | - }
	PUSHINT	4                       ; >%96 = CONST_I64 4
                                        ; { %4 | %0 | %1 | %53 | %96 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %53 | %96 | %1 | - }
	CALL	1                       ; >%54 = CALL_1 %96, %1
                                        ; { %4 | %0 | %1 | %53 | %54 | - }
	DUP                             ; { %4 | %0 | %1 | %53 | %54 | %54 | - }
	LSHIFT	3                       ; >%55 = SHLCONST %54, 3
                                        ; { %4 | %0 | %1 | %53 | %54 | %55 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %53 | %54 | %55 | %1 | - }
	CALL	1                       ; >%56 = CALL_1 %55, %1
                                        ; { %4 | %0 | %1 | %53 | %54 | %56 | - }
	XCHG	s1, s2                  ; { %4 | %0 | %1 | %54 | %53 | %56 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %54 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %54 | %4 | - }
	ADDCONST	120             ; >%57 = ADDCONST %4, 120
                                        ; { %4 | %0 | %1 | %54 | %57 | - }
	SWAP                            ; { %4 | %0 | %1 | %57 | %54 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	136                     ; >%97 = CONST_I64 136
                                        ; { %4 | %0 | %1 | %97 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %97 | %4 | - }
	SWAP                            ; { %4 | %0 | %1 | %4 | %97 | - }
	ADD                             ; >%59 = ADD %4, %97
                                        ; { %4 | %0 | %1 | %59 | - }
	PUSHINT	64                      ; >%98 = CONST_I64 64
                                        ; { %4 | %0 | %1 | %59 | %98 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %59 | %98 | %1 | - }
	CALL	1                       ; >%61 = CALL_1 %98, %1
                                        ; { %4 | %0 | %1 | %59 | %61 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	144                     ; >%99 = CONST_I64 144
                                        ; { %4 | %0 | %1 | %99 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %99 | %4 | - }
	SWAP                            ; { %4 | %0 | %1 | %4 | %99 | - }
	ADD                             ; >%63 = ADD %4, %99
                                        ; { %4 | %0 | %1 | %63 | - }
	PUSHINT	32                      ; >%100 = CONST_I64 32
                                        ; { %4 | %0 | %1 | %63 | %100 | - }
	PUSH	s2                      ; { %4 | %0 | %1 | %63 | %100 | %1 | - }
	CALL	1                       ; >%65 = CALL_1 %100, %1
                                        ; { %4 | %0 | %1 | %63 | %65 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	152                     ; >%101 = CONST_I64 152
                                        ; { %4 | %0 | %1 | %101 | - }
	XCHG	s1, s3                  ; { %1 | %0 | %4 | %101 | - }
	ADD                             ; >%67 = ADD %4, %101
                                        ; { %1 | %0 | %67 | - }
	PUSHINT	16                      ; >%102 = CONST_I64 16
                                        ; { %1 | %0 | %67 | %102 | - }
	XCHG2	s0, s3                  ; { %67 | %0 | %102 | %1 | - }
	CALL	1                       ; >%69 = CALL_1 %102, %1
                                        ; { %67 | %0 | %69 | - }
	XCHG	s1, s2                  ; { %0 | %67 | %69 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end49:
	.size	Deserialize_CommonMsgInfo_Impl, .Lfunc_end49-Deserialize_CommonMsgInfo_Impl
                                        ; -- End function
	.globl	Deserialize_CommonMsgInfo ; -- Begin function Deserialize_CommonMsgInfo
	.p2align	1
	.type	Deserialize_CommonMsgInfo,@function
Deserialize_CommonMsgInfo:              ; @Deserialize_CommonMsgInfo
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Deserialize_CommonMsgInfo_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Deserialize_CommonMsgInfo_Impl
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end50:
	.size	Deserialize_CommonMsgInfo, .Lfunc_end50-Deserialize_CommonMsgInfo
                                        ; -- End function
	.globl	Serialize_CommonMsgInfo_ExtOut_Impl ; -- Begin function Serialize_CommonMsgInfo_ExtOut_Impl
	.p2align	1
	.type	Serialize_CommonMsgInfo_ExtOut_Impl,@function
Serialize_CommonMsgInfo_ExtOut_Impl:    ; @Serialize_CommonMsgInfo_ExtOut_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	PUSH	s1                      ; { %1 | %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %1 | %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %1 | %0 | %2 | %3 | - }
	PUSHINT	2                       ; >%24 = CONST_I64 2
                                        ; { %1 | %0 | %2 | %3 | %24 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %2 | %24 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	1                       ; >%25 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %25 | - }
	PUSHINT	1                       ; >%26 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %25 | %26 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %25 | %26 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	0                       ; >%27 = CONST_I64 0
                                        ; { %1 | %0 | %3 | %27 | - }
	PUSHINT	1                       ; >%28 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %27 | %28 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %27 | %28 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	8               ; >%7 = ADDCONST %1, 8
                                        ; { %1 | %0 | %3 | %7 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %7
                                        ; { %1 | %0 | %3 | %8 | - }
	PUSHINT	1                       ; >%29 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %8 | %29 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %8 | %29 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	16              ; >%9 = ADDCONST %1, 16
                                        ; { %1 | %0 | %3 | %9 | - }
	CALL	$:load$                 ; >%10 = CALL_LOAD %9
                                        ; { %1 | %0 | %3 | %10 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%11 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %1 | %0 | %3 | %10 | %11 | - }
	PUSHINT	8                       ; >%30 = CONST_I64 8
                                        ; { %1 | %0 | %3 | %10 | %11 | %30 | - }
	SWAP                            ; { %1 | %0 | %3 | %10 | %30 | %11 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	24              ; >%13 = ADDCONST %1, 24
                                        ; { %1 | %0 | %3 | %13 | - }
	CALL	$:load$                 ; >%14 = CALL_LOAD %13
                                        ; { %1 | %0 | %3 | %14 | - }
	PUSHINT	256                     ; >%31 = CONST_I64 256
                                        ; { %1 | %0 | %3 | %14 | %31 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %14 | %31 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	32              ; >%16 = ADDCONST %1, 32
                                        ; { %1 | %0 | %3 | %16 | - }
	CALL	$:load$                 ; >%17 = CALL_LOAD %16
                                        ; { %1 | %0 | %3 | %17 | - }
	PUSHINT	2                       ; >%32 = CONST_I64 2
                                        ; { %1 | %0 | %3 | %17 | %32 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %17 | %32 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	40              ; >%18 = ADDCONST %1, 40
                                        ; { %1 | %0 | %3 | %18 | - }
	CALL	$:load$                 ; >%19 = CALL_LOAD %18
                                        ; { %1 | %0 | %3 | %19 | - }
	PUSHINT	64                      ; >%33 = CONST_I64 64
                                        ; { %1 | %0 | %3 | %19 | %33 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %19 | %33 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	XCHG	s0, s2                  ; { %3 | %0 | %1 | - }
	ADDCONST	48              ; >%21 = ADDCONST %1, 48
                                        ; { %3 | %0 | %21 | - }
	CALL	$:load$                 ; >%22 = CALL_LOAD %21
                                        ; { %3 | %0 | %22 | - }
	PUSHINT	32                      ; >%34 = CONST_I64 32
                                        ; { %3 | %0 | %22 | %34 | - }
	XCHG3	s1, s0, s3              ; { %0 | %22 | %34 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end51:
	.size	Serialize_CommonMsgInfo_ExtOut_Impl, .Lfunc_end51-Serialize_CommonMsgInfo_ExtOut_Impl
                                        ; -- End function
	.globl	Serialize_CommonMsgInfo_ExtOut ; -- Begin function Serialize_CommonMsgInfo_ExtOut
	.p2align	1
	.type	Serialize_CommonMsgInfo_ExtOut,@function
Serialize_CommonMsgInfo_ExtOut:         ; @Serialize_CommonMsgInfo_ExtOut
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %2 | %0 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	PUSH	s1                      ; { %2 | %0 | %2 | - }
	CALL	$:load$                 ; >%3 = CALL_LOAD %2
                                        ; { %2 | %0 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%4 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %2 | %0 | %3 | %4 | - }
	PUSHINT	2                       ; >%25 = CONST_I64 2
                                        ; { %2 | %0 | %3 | %4 | %25 | - }
	XC2PU	s2, s0, s2              ; { %2 | %0 | %4 | %3 | %25 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSHINT	1                       ; >%26 = CONST_I64 1
                                        ; { %2 | %0 | %4 | %26 | - }
	PUSHINT	1                       ; >%27 = CONST_I64 1
                                        ; { %2 | %0 | %4 | %26 | %27 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %26 | %27 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSHINT	0                       ; >%28 = CONST_I64 0
                                        ; { %2 | %0 | %4 | %28 | - }
	PUSHINT	1                       ; >%29 = CONST_I64 1
                                        ; { %2 | %0 | %4 | %28 | %29 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %28 | %29 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	8               ; >%8 = ADDCONST %2, 8
                                        ; { %2 | %0 | %4 | %8 | - }
	CALL	$:load$                 ; >%9 = CALL_LOAD %8
                                        ; { %2 | %0 | %4 | %9 | - }
	PUSHINT	1                       ; >%30 = CONST_I64 1
                                        ; { %2 | %0 | %4 | %9 | %30 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %9 | %30 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	16              ; >%10 = ADDCONST %2, 16
                                        ; { %2 | %0 | %4 | %10 | - }
	CALL	$:load$                 ; >%11 = CALL_LOAD %10
                                        ; { %2 | %0 | %4 | %11 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %2 | %0 | %4 | %11 | %12 | - }
	PUSHINT	8                       ; >%31 = CONST_I64 8
                                        ; { %2 | %0 | %4 | %11 | %12 | %31 | - }
	SWAP                            ; { %2 | %0 | %4 | %11 | %31 | %12 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	24              ; >%14 = ADDCONST %2, 24
                                        ; { %2 | %0 | %4 | %14 | - }
	CALL	$:load$                 ; >%15 = CALL_LOAD %14
                                        ; { %2 | %0 | %4 | %15 | - }
	PUSHINT	256                     ; >%32 = CONST_I64 256
                                        ; { %2 | %0 | %4 | %15 | %32 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %15 | %32 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	32              ; >%17 = ADDCONST %2, 32
                                        ; { %2 | %0 | %4 | %17 | - }
	CALL	$:load$                 ; >%18 = CALL_LOAD %17
                                        ; { %2 | %0 | %4 | %18 | - }
	PUSHINT	2                       ; >%33 = CONST_I64 2
                                        ; { %2 | %0 | %4 | %18 | %33 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %18 | %33 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %2 | - }
	ADDCONST	40              ; >%19 = ADDCONST %2, 40
                                        ; { %2 | %0 | %4 | %19 | - }
	CALL	$:load$                 ; >%20 = CALL_LOAD %19
                                        ; { %2 | %0 | %4 | %20 | - }
	PUSHINT	64                      ; >%34 = CONST_I64 64
                                        ; { %2 | %0 | %4 | %20 | %34 | - }
	PUSH	s2                      ; { %2 | %0 | %4 | %20 | %34 | %4 | - }
	CALL	1                       ; { %2 | %0 | %4 | - }
	XCHG	s0, s2                  ; { %4 | %0 | %2 | - }
	ADDCONST	48              ; >%22 = ADDCONST %2, 48
                                        ; { %4 | %0 | %22 | - }
	CALL	$:load$                 ; >%23 = CALL_LOAD %22
                                        ; { %4 | %0 | %23 | - }
	PUSHINT	32                      ; >%35 = CONST_I64 32
                                        ; { %4 | %0 | %23 | %35 | - }
	XCHG3	s1, s0, s3              ; { %0 | %23 | %35 | %4 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end52:
	.size	Serialize_CommonMsgInfo_ExtOut, .Lfunc_end52-Serialize_CommonMsgInfo_ExtOut
                                        ; -- End function
	.globl	Deserialize_CommonMsgInfo_ExtOut_Impl ; -- Begin function Deserialize_CommonMsgInfo_ExtOut_Impl
	.p2align	1
	.type	Deserialize_CommonMsgInfo_ExtOut_Impl,@function
Deserialize_CommonMsgInfo_ExtOut_Impl:  ; @Deserialize_CommonMsgInfo_ExtOut_Impl
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	2                       ; >%30 = CONST_I64 2
                                        ; { %4 | %0 | %1 | %30 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %30 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %30, %1
                                        ; { %4 | %0 | %1 | %3 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %3 | %4 | - }
	SWAP                            ; { %4 | %0 | %1 | %4 | %3 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%31 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %31 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %31 | %1 | - }
	CALL	1                       ; >%6 = CALL_1 %31, %1
                                        ; { %4 | %0 | %1 | %6 | - }
	PUSHINT	1                       ; >%32 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %6 | %32 | - }
	NEQ                             ; >%7 = NE %6, %32
                                        ; { %4 | %0 | %1 | %7 | - }
	PUSHINT	1                       ; >%33 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %7 | %33 | - }
	AND                             ; >%8 = AND %7, %33
                                        ; { %4 | %0 | %1 | %8 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%34 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %34 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %34 | %1 | - }
	CALL	1                       ; >%10 = CALL_1 %34, %1
                                        ; { %4 | %0 | %1 | %10 | - }
	PUSHINT	0                       ; >%35 = CONST_I64 0
                                        ; { %4 | %0 | %1 | %10 | %35 | - }
	NEQ                             ; >%11 = NE %10, %35
                                        ; { %4 | %0 | %1 | %11 | - }
	PUSHINT	1                       ; >%36 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %11 | %36 | - }
	AND                             ; >%12 = AND %11, %36
                                        ; { %4 | %0 | %1 | %12 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%37 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %37 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %37 | %1 | - }
	CALL	1                       ; >%13 = CALL_1 %37, %1
                                        ; { %4 | %0 | %1 | %13 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%14 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %4 | %0 | %1 | %13 | %14 | - }
	PUSHINT	8                       ; >%38 = CONST_I64 8
                                        ; { %4 | %0 | %1 | %13 | %14 | %38 | - }
	SWAP                            ; { %4 | %0 | %1 | %13 | %38 | %14 | - }
	CALL	1                       ; >%16 = CALL_1 %38, %14
                                        ; { %4 | %0 | %1 | %13 | %16 | - }
	PUSHINT	256                     ; >%39 = CONST_I64 256
                                        ; { %4 | %0 | %1 | %13 | %16 | %39 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %13 | %16 | %39 | %1 | - }
	CALL	1                       ; >%18 = CALL_1 %39, %1
                                        ; { %4 | %0 | %1 | %13 | %16 | %18 | - }
	PUSH	s5                      ; { %4 | %0 | %1 | %13 | %16 | %18 | %4 | - }
	ADDCONST	16              ; >%19 = ADDCONST %4, 16
                                        ; { %4 | %0 | %1 | %13 | %16 | %18 | %19 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %13 | %18 | %19 | %16 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %13 | %18 | - }
	PUSH	s4                      ; { %4 | %0 | %1 | %13 | %18 | %4 | - }
	ADDCONST	8               ; >%20 = ADDCONST %4, 8
                                        ; { %4 | %0 | %1 | %13 | %18 | %20 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %18 | %20 | %13 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %18 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %18 | %4 | - }
	ADDCONST	24              ; >%21 = ADDCONST %4, 24
                                        ; { %4 | %0 | %1 | %18 | %21 | - }
	SWAP                            ; { %4 | %0 | %1 | %21 | %18 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	2                       ; >%40 = CONST_I64 2
                                        ; { %4 | %0 | %1 | %40 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %40 | %1 | - }
	CALL	1                       ; >%22 = CALL_1 %40, %1
                                        ; { %4 | %0 | %1 | %22 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %22 | %4 | - }
	ADDCONST	32              ; >%23 = ADDCONST %4, 32
                                        ; { %4 | %0 | %1 | %22 | %23 | - }
	SWAP                            ; { %4 | %0 | %1 | %23 | %22 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	64                      ; >%41 = CONST_I64 64
                                        ; { %4 | %0 | %1 | %41 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %41 | %1 | - }
	CALL	1                       ; >%25 = CALL_1 %41, %1
                                        ; { %4 | %0 | %1 | %25 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %25 | %4 | - }
	ADDCONST	40              ; >%26 = ADDCONST %4, 40
                                        ; { %4 | %0 | %1 | %25 | %26 | - }
	SWAP                            ; { %4 | %0 | %1 | %26 | %25 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	32                      ; >%42 = CONST_I64 32
                                        ; { %4 | %0 | %1 | %42 | - }
	SWAP                            ; { %4 | %0 | %42 | %1 | - }
	CALL	1                       ; >%28 = CALL_1 %42, %1
                                        ; { %4 | %0 | %28 | - }
	XCHG	s0, s2                  ; { %28 | %0 | %4 | - }
	ADDCONST	48              ; >%29 = ADDCONST %4, 48
                                        ; { %28 | %0 | %29 | - }
	XCHG2	s0, s2                  ; { %0 | %29 | %28 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end53:
	.size	Deserialize_CommonMsgInfo_ExtOut_Impl, .Lfunc_end53-Deserialize_CommonMsgInfo_ExtOut_Impl
                                        ; -- End function
	.globl	Deserialize_CommonMsgInfo_ExtOut ; -- Begin function Deserialize_CommonMsgInfo_ExtOut
	.p2align	1
	.type	Deserialize_CommonMsgInfo_ExtOut,@function
Deserialize_CommonMsgInfo_ExtOut:       ; @Deserialize_CommonMsgInfo_ExtOut
; %bb.0:                                ; %entry
                                        ; { %4 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %4 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %4 | %0 | %1 | - }
	PUSHINT	2                       ; >%31 = CONST_I64 2
                                        ; { %4 | %0 | %1 | %31 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %31 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %31, %1
                                        ; { %4 | %0 | %1 | %3 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %3 | %4 | - }
	SWAP                            ; { %4 | %0 | %1 | %4 | %3 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%32 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %32 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %32 | %1 | - }
	CALL	1                       ; >%6 = CALL_1 %32, %1
                                        ; { %4 | %0 | %1 | %6 | - }
	PUSHINT	1                       ; >%33 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %6 | %33 | - }
	NEQ                             ; >%7 = NE %6, %33
                                        ; { %4 | %0 | %1 | %7 | - }
	PUSHINT	1                       ; >%34 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %7 | %34 | - }
	AND                             ; >%8 = AND %7, %34
                                        ; { %4 | %0 | %1 | %8 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%35 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %35 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %35 | %1 | - }
	CALL	1                       ; >%10 = CALL_1 %35, %1
                                        ; { %4 | %0 | %1 | %10 | - }
	PUSHINT	0                       ; >%36 = CONST_I64 0
                                        ; { %4 | %0 | %1 | %10 | %36 | - }
	NEQ                             ; >%11 = NE %10, %36
                                        ; { %4 | %0 | %1 | %11 | - }
	PUSHINT	1                       ; >%37 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %11 | %37 | - }
	AND                             ; >%12 = AND %11, %37
                                        ; { %4 | %0 | %1 | %12 | - }
	THROWIF	59                      ; { %4 | %0 | %1 | - }
	PUSHINT	1                       ; >%38 = CONST_I64 1
                                        ; { %4 | %0 | %1 | %38 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %38 | %1 | - }
	CALL	1                       ; >%13 = CALL_1 %38, %1
                                        ; { %4 | %0 | %1 | %13 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%14 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %4 | %0 | %1 | %13 | %14 | - }
	PUSHINT	8                       ; >%39 = CONST_I64 8
                                        ; { %4 | %0 | %1 | %13 | %14 | %39 | - }
	SWAP                            ; { %4 | %0 | %1 | %13 | %39 | %14 | - }
	CALL	1                       ; >%16 = CALL_1 %39, %14
                                        ; { %4 | %0 | %1 | %13 | %16 | - }
	PUSHINT	256                     ; >%40 = CONST_I64 256
                                        ; { %4 | %0 | %1 | %13 | %16 | %40 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %13 | %16 | %40 | %1 | - }
	CALL	1                       ; >%18 = CALL_1 %40, %1
                                        ; { %4 | %0 | %1 | %13 | %16 | %18 | - }
	PUSH	s5                      ; { %4 | %0 | %1 | %13 | %16 | %18 | %4 | - }
	ADDCONST	16              ; >%19 = ADDCONST %4, 16
                                        ; { %4 | %0 | %1 | %13 | %16 | %18 | %19 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %13 | %18 | %19 | %16 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %13 | %18 | - }
	PUSH	s4                      ; { %4 | %0 | %1 | %13 | %18 | %4 | - }
	ADDCONST	8               ; >%20 = ADDCONST %4, 8
                                        ; { %4 | %0 | %1 | %13 | %18 | %20 | - }
	XCHG2	s0, s2                  ; { %4 | %0 | %1 | %18 | %20 | %13 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | %18 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %18 | %4 | - }
	ADDCONST	24              ; >%21 = ADDCONST %4, 24
                                        ; { %4 | %0 | %1 | %18 | %21 | - }
	SWAP                            ; { %4 | %0 | %1 | %21 | %18 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	2                       ; >%41 = CONST_I64 2
                                        ; { %4 | %0 | %1 | %41 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %41 | %1 | - }
	CALL	1                       ; >%22 = CALL_1 %41, %1
                                        ; { %4 | %0 | %1 | %22 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %22 | %4 | - }
	ADDCONST	32              ; >%23 = ADDCONST %4, 32
                                        ; { %4 | %0 | %1 | %22 | %23 | - }
	SWAP                            ; { %4 | %0 | %1 | %23 | %22 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	64                      ; >%42 = CONST_I64 64
                                        ; { %4 | %0 | %1 | %42 | - }
	PUSH	s1                      ; { %4 | %0 | %1 | %42 | %1 | - }
	CALL	1                       ; >%25 = CALL_1 %42, %1
                                        ; { %4 | %0 | %1 | %25 | - }
	PUSH	s3                      ; { %4 | %0 | %1 | %25 | %4 | - }
	ADDCONST	40              ; >%26 = ADDCONST %4, 40
                                        ; { %4 | %0 | %1 | %25 | %26 | - }
	SWAP                            ; { %4 | %0 | %1 | %26 | %25 | - }
	CALL	$:store$                ; { %4 | %0 | %1 | - }
	PUSHINT	32                      ; >%43 = CONST_I64 32
                                        ; { %4 | %0 | %1 | %43 | - }
	SWAP                            ; { %4 | %0 | %43 | %1 | - }
	CALL	1                       ; >%28 = CALL_1 %43, %1
                                        ; { %4 | %0 | %28 | - }
	XCHG	s0, s2                  ; { %28 | %0 | %4 | - }
	ADDCONST	48              ; >%29 = ADDCONST %4, 48
                                        ; { %28 | %0 | %29 | - }
	XCHG2	s0, s2                  ; { %0 | %29 | %28 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%30 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %30 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end54:
	.size	Deserialize_CommonMsgInfo_ExtOut, .Lfunc_end54-Deserialize_CommonMsgInfo_ExtOut
                                        ; -- End function
	.globl	Serialize_EmptyMessage_Impl ; -- Begin function Serialize_EmptyMessage_Impl
	.p2align	1
	.type	Serialize_EmptyMessage_Impl,@function
Serialize_EmptyMessage_Impl:            ; @Serialize_EmptyMessage_Impl
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Serialize_CommonMsgInfo_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Serialize_CommonMsgInfo_Impl
                                        ; { %2 | %0 | %1 | - }
	PUSH	s2                      ; { %2 | %0 | %1 | %2 | - }
	SWAP                            ; { %2 | %0 | %2 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	PUSHINT	160                     ; >%8 = CONST_I64 160
                                        ; { %2 | %0 | %8 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %8 | - }
	ADD                             ; >%4 = ADD %2, %8
                                        ; { %0 | %4 | - }
	CALL	$:load$                 ; >%5 = CALL_LOAD %4
                                        ; { %0 | %5 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%6 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %5 | %6 | - }
	PUSHINT	1                       ; >%9 = CONST_I64 1
                                        ; { %0 | %5 | %6 | %9 | - }
	SWAP                            ; { %0 | %5 | %9 | %6 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end55:
	.size	Serialize_EmptyMessage_Impl, .Lfunc_end55-Serialize_EmptyMessage_Impl
                                        ; -- End function
	.globl	Serialize_EmptyMessage  ; -- Begin function Serialize_EmptyMessage
	.p2align	1
	.type	Serialize_EmptyMessage,@function
Serialize_EmptyMessage:                 ; @Serialize_EmptyMessage
; %bb.0:                                ; %entry
                                        ; { %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %3 | %0 | %1 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	$Serialize_CommonMsgInfo_Impl$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @Serialize_CommonMsgInfo_Impl
                                        ; { %3 | %0 | %2 | - }
	PUSH	s2                      ; { %3 | %0 | %2 | %3 | - }
	SWAP                            ; { %3 | %0 | %3 | %2 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	160                     ; >%9 = CONST_I64 160
                                        ; { %3 | %0 | %9 | - }
	XCHG	s1, s2                  ; { %0 | %3 | %9 | - }
	ADD                             ; >%5 = ADD %3, %9
                                        ; { %0 | %5 | - }
	CALL	$:load$                 ; >%6 = CALL_LOAD %5
                                        ; { %0 | %6 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%7 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %0 | %6 | %7 | - }
	PUSHINT	1                       ; >%10 = CONST_I64 1
                                        ; { %0 | %6 | %7 | %10 | - }
	SWAP                            ; { %0 | %6 | %10 | %7 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end56:
	.size	Serialize_EmptyMessage, .Lfunc_end56-Serialize_EmptyMessage
                                        ; -- End function
	.globl	Deserialize_EmptyMessage_Impl ; -- Begin function Deserialize_EmptyMessage_Impl
	.p2align	1
	.type	Deserialize_EmptyMessage_Impl,@function
Deserialize_EmptyMessage_Impl:          ; @Deserialize_EmptyMessage_Impl
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Deserialize_CommonMsgInfo_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Deserialize_CommonMsgInfo_Impl
                                        ; { %2 | %0 | %1 | - }
	PUSH	s2                      ; { %2 | %0 | %1 | %2 | - }
	SWAP                            ; { %2 | %0 | %2 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	PUSHINT	160                     ; >%8 = CONST_I64 160
                                        ; { %2 | %0 | %8 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %8 | - }
	ADD                             ; >%4 = ADD %2, %8
                                        ; { %0 | %4 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%5 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %0 | %4 | %5 | - }
	PUSHINT	1                       ; >%9 = CONST_I64 1
                                        ; { %0 | %4 | %5 | %9 | - }
	SWAP                            ; { %0 | %4 | %9 | %5 | - }
	CALL	1                       ; >%7 = CALL_1 %9, %5
                                        ; { %0 | %4 | %7 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end57:
	.size	Deserialize_EmptyMessage_Impl, .Lfunc_end57-Deserialize_EmptyMessage_Impl
                                        ; -- End function
	.globl	Deserialize_EmptyMessage ; -- Begin function Deserialize_EmptyMessage
	.p2align	1
	.type	Deserialize_EmptyMessage,@function
Deserialize_EmptyMessage:               ; @Deserialize_EmptyMessage
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Deserialize_CommonMsgInfo_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Deserialize_CommonMsgInfo_Impl
                                        ; { %2 | %0 | %1 | - }
	PUSH	s2                      ; { %2 | %0 | %1 | %2 | - }
	SWAP                            ; { %2 | %0 | %2 | %1 | - }
	CALL	1                       ; { %2 | %0 | - }
	PUSHINT	160                     ; >%9 = CONST_I64 160
                                        ; { %2 | %0 | %9 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %9 | - }
	ADD                             ; >%4 = ADD %2, %9
                                        ; { %0 | %4 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%5 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %0 | %4 | %5 | - }
	PUSHINT	1                       ; >%10 = CONST_I64 1
                                        ; { %0 | %4 | %5 | %10 | - }
	SWAP                            ; { %0 | %4 | %10 | %5 | - }
	CALL	1                       ; >%7 = CALL_1 %10, %5
                                        ; { %0 | %4 | %7 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%8 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %8 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end58:
	.size	Deserialize_EmptyMessage, .Lfunc_end58-Deserialize_EmptyMessage
                                        ; -- End function
	.globl	Serialize_Message_ExtOut_int256_Impl ; -- Begin function Serialize_Message_ExtOut_int256_Impl
	.p2align	1
	.type	Serialize_Message_ExtOut_int256_Impl,@function
Serialize_Message_ExtOut_int256_Impl:   ; @Serialize_Message_ExtOut_int256_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	PUSH	s1                      ; { %1 | %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %1 | %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %1 | %0 | %2 | %3 | - }
	PUSHINT	2                       ; >%30 = CONST_I64 2
                                        ; { %1 | %0 | %2 | %3 | %30 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %2 | %30 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	1                       ; >%31 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %31 | - }
	PUSHINT	1                       ; >%32 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %31 | %32 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %31 | %32 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	0                       ; >%33 = CONST_I64 0
                                        ; { %1 | %0 | %3 | %33 | - }
	PUSHINT	1                       ; >%34 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %33 | %34 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %33 | %34 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	8               ; >%7 = ADDCONST %1, 8
                                        ; { %1 | %0 | %3 | %7 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %7
                                        ; { %1 | %0 | %3 | %8 | - }
	PUSHINT	1                       ; >%35 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %8 | %35 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %8 | %35 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	16              ; >%9 = ADDCONST %1, 16
                                        ; { %1 | %0 | %3 | %9 | - }
	CALL	$:load$                 ; >%10 = CALL_LOAD %9
                                        ; { %1 | %0 | %3 | %10 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%11 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %1 | %0 | %3 | %10 | %11 | - }
	PUSHINT	8                       ; >%36 = CONST_I64 8
                                        ; { %1 | %0 | %3 | %10 | %11 | %36 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %11 | %10 | %36 | %11 | - }
	CALL	1                       ; { %1 | %0 | %3 | %11 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %1 | - }
	ADDCONST	24              ; >%13 = ADDCONST %1, 24
                                        ; { %1 | %0 | %3 | %11 | %13 | - }
	CALL	$:load$                 ; >%14 = CALL_LOAD %13
                                        ; { %1 | %0 | %3 | %11 | %14 | - }
	PUSHINT	256                     ; >%37 = CONST_I64 256
                                        ; { %1 | %0 | %3 | %11 | %14 | %37 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %14 | %37 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %11 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %1 | - }
	ADDCONST	32              ; >%16 = ADDCONST %1, 32
                                        ; { %1 | %0 | %3 | %11 | %16 | - }
	CALL	$:load$                 ; >%17 = CALL_LOAD %16
                                        ; { %1 | %0 | %3 | %11 | %17 | - }
	PUSHINT	2                       ; >%38 = CONST_I64 2
                                        ; { %1 | %0 | %3 | %11 | %17 | %38 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %17 | %38 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %11 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %1 | - }
	ADDCONST	40              ; >%18 = ADDCONST %1, 40
                                        ; { %1 | %0 | %3 | %11 | %18 | - }
	CALL	$:load$                 ; >%19 = CALL_LOAD %18
                                        ; { %1 | %0 | %3 | %11 | %19 | - }
	PUSHINT	64                      ; >%39 = CONST_I64 64
                                        ; { %1 | %0 | %3 | %11 | %19 | %39 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %19 | %39 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %11 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %1 | - }
	ADDCONST	48              ; >%21 = ADDCONST %1, 48
                                        ; { %1 | %0 | %3 | %11 | %21 | - }
	CALL	$:load$                 ; >%22 = CALL_LOAD %21
                                        ; { %1 | %0 | %3 | %11 | %22 | - }
	PUSHINT	32                      ; >%40 = CONST_I64 32
                                        ; { %1 | %0 | %3 | %11 | %22 | %40 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %22 | %40 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %11 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %1 | - }
	ADDCONST	56              ; >%24 = ADDCONST %1, 56
                                        ; { %1 | %0 | %3 | %11 | %24 | - }
	CALL	$:load$                 ; >%25 = CALL_LOAD %24
                                        ; { %1 | %0 | %3 | %11 | %25 | - }
	PUSHINT	1                       ; >%41 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %11 | %25 | %41 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %25 | %41 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | %11 | - }
	PUSH	s3                      ; { %1 | %0 | %3 | %11 | %1 | - }
	ADDCONST	64              ; >%26 = ADDCONST %1, 64
                                        ; { %1 | %0 | %3 | %11 | %26 | - }
	CALL	$:load$                 ; >%27 = CALL_LOAD %26
                                        ; { %1 | %0 | %3 | %11 | %27 | - }
	PUSHINT	1                       ; >%42 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %11 | %27 | %42 | - }
	XCHG3	s1, s0, s3              ; { %1 | %0 | %11 | %27 | %42 | %3 | - }
	CALL	1                       ; { %1 | %0 | %11 | - }
	XCHG	s0, s2                  ; { %11 | %0 | %1 | - }
	ADDCONST	72              ; >%28 = ADDCONST %1, 72
                                        ; { %11 | %0 | %28 | - }
	CALL	$:load$                 ; >%29 = CALL_LOAD %28
                                        ; { %11 | %0 | %29 | - }
	PUSHINT	256                     ; >%43 = CONST_I64 256
                                        ; { %11 | %0 | %29 | %43 | - }
	XCHG3	s1, s0, s3              ; { %0 | %29 | %43 | %11 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end59:
	.size	Serialize_Message_ExtOut_int256_Impl, .Lfunc_end59-Serialize_Message_ExtOut_int256_Impl
                                        ; -- End function
	.globl	Serialize_Message_ExtOut_int256 ; -- Begin function Serialize_Message_ExtOut_int256
	.p2align	1
	.type	Serialize_Message_ExtOut_int256,@function
Serialize_Message_ExtOut_int256:        ; @Serialize_Message_ExtOut_int256
; %bb.0:                                ; %entry
                                        ; { %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %3 | %0 | %1 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	$Serialize_Message_ExtOut_int256_Impl$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @Serialize_Message_ExtOut_int256_Impl
                                        ; { %3 | %0 | %2 | - }
	XCHG	s1, s2                  ; { %0 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end60:
	.size	Serialize_Message_ExtOut_int256, .Lfunc_end60-Serialize_Message_ExtOut_int256
                                        ; -- End function
	.globl	Deserialize_Message_ExtOut_int256_Impl ; -- Begin function Deserialize_Message_ExtOut_int256_Impl
	.p2align	1
	.type	Deserialize_Message_ExtOut_int256_Impl,@function
Deserialize_Message_ExtOut_int256_Impl: ; @Deserialize_Message_ExtOut_int256_Impl
; %bb.0:                                ; %entry
                                        ; { %23 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %23 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %23 | %0 | %1 | - }
	PUSHINT	2                       ; >%36 = CONST_I64 2
                                        ; { %23 | %0 | %1 | %36 | - }
	PUSH	s1                      ; { %23 | %0 | %1 | %36 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %36, %1
                                        ; { %23 | %0 | %1 | %3 | - }
	PUSHINT	1                       ; >%37 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %37 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %3 | %37 | %1 | - }
	CALL	1                       ; >%5 = CALL_1 %37, %1
                                        ; { %23 | %0 | %1 | %3 | %5 | - }
	PUSHINT	1                       ; >%38 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %5 | %38 | - }
	NEQ                             ; >%6 = NE %5, %38
                                        ; { %23 | %0 | %1 | %3 | %6 | - }
	PUSHINT	1                       ; >%39 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %6 | %39 | - }
	AND                             ; >%7 = AND %6, %39
                                        ; { %23 | %0 | %1 | %3 | %7 | - }
	THROWIF	59                      ; { %23 | %0 | %1 | %3 | - }
	PUSHINT	1                       ; >%40 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %40 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %3 | %40 | %1 | - }
	CALL	1                       ; >%9 = CALL_1 %40, %1
                                        ; { %23 | %0 | %1 | %3 | %9 | - }
	PUSHINT	0                       ; >%41 = CONST_I64 0
                                        ; { %23 | %0 | %1 | %3 | %9 | %41 | - }
	NEQ                             ; >%10 = NE %9, %41
                                        ; { %23 | %0 | %1 | %3 | %10 | - }
	PUSHINT	1                       ; >%42 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %10 | %42 | - }
	AND                             ; >%11 = AND %10, %42
                                        ; { %23 | %0 | %1 | %3 | %11 | - }
	THROWIF	59                      ; { %23 | %0 | %1 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %23 | %0 | %1 | %3 | %12 | - }
	PUSHINT	1                       ; >%43 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %12 | %43 | - }
	PUSH	s3                      ; { %23 | %0 | %1 | %3 | %12 | %43 | %1 | - }
	CALL	1                       ; >%14 = CALL_1 %43, %1
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | - }
	PUSHINT	8                       ; >%44 = CONST_I64 8
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %44 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %3 | %12 | %14 | %44 | %12 | - }
	CALL	1                       ; >%15 = CALL_1 %44, %12
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | - }
	PUSHINT	256                     ; >%45 = CONST_I64 256
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %45 | - }
	PUSH	s5                      ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %45 | %1 | - }
	CALL	1                       ; >%17 = CALL_1 %45, %1
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | - }
	PUSHINT	2                       ; >%46 = CONST_I64 2
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %46 | - }
	PUSH	s6                      ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %46 | %1 | - }
	CALL	1                       ; >%18 = CALL_1 %46, %1
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | - }
	PUSHINT	64                      ; >%47 = CONST_I64 64
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %47 | - }
	PUSH	s7                      ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %47 | %1 | - }
	CALL	1                       ; >%20 = CALL_1 %47, %1
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %20 | - }
	PUSHINT	32                      ; >%48 = CONST_I64 32
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %20 | %48 | - }
	PUSH	s8                      ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %20 | %48 | %1 | - }
	CALL	1                       ; >%22 = CALL_1 %48, %1
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %20 | %22 | - }
	PUSH	s10                     ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %20 | %22 | %23 | - }
	ADDCONST	8               ; >%24 = ADDCONST %23, 8
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %15 | %17 | %18 | %20 | %22 | %24 | - }
	XCHG2	s0, s6                  ; { %23 | %0 | %1 | %3 | %12 | %22 | %15 | %17 | %18 | %20 | %24 | %14 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %12 | %22 | %15 | %17 | %18 | %20 | - }
	PUSH	s9                      ; { %23 | %0 | %1 | %3 | %12 | %22 | %15 | %17 | %18 | %20 | %23 | - }
	ADDCONST	16              ; >%25 = ADDCONST %23, 16
                                        ; { %23 | %0 | %1 | %3 | %12 | %22 | %15 | %17 | %18 | %20 | %25 | - }
	XCHG2	s0, s4                  ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %17 | %18 | %25 | %15 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %17 | %18 | - }
	PUSH	s8                      ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %17 | %18 | %23 | - }
	ADDCONST	24              ; >%26 = ADDCONST %23, 24
                                        ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %17 | %18 | %26 | - }
	XCHG2	s0, s2                  ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %18 | %26 | %17 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %18 | - }
	PUSH	s7                      ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %18 | %23 | - }
	ADDCONST	32              ; >%27 = ADDCONST %23, 32
                                        ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %18 | %27 | - }
	SWAP                            ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %27 | %18 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | - }
	PUSH	s6                      ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %23 | - }
	ADDCONST	40              ; >%28 = ADDCONST %23, 40
                                        ; { %23 | %0 | %1 | %3 | %12 | %22 | %20 | %28 | - }
	SWAP                            ; { %23 | %0 | %1 | %3 | %12 | %22 | %28 | %20 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %12 | %22 | - }
	PUSH	s5                      ; { %23 | %0 | %1 | %3 | %12 | %22 | %23 | - }
	ADDCONST	48              ; >%29 = ADDCONST %23, 48
                                        ; { %23 | %0 | %1 | %3 | %12 | %22 | %29 | - }
	SWAP                            ; { %23 | %0 | %1 | %3 | %12 | %29 | %22 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %12 | - }
	PUXC	s4, s1                  ; { %23 | %0 | %1 | %12 | %23 | %3 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %12 | - }
	PUSH	s3                      ; { %23 | %0 | %1 | %12 | %23 | - }
	ADDCONST	56              ; >%30 = ADDCONST %23, 56
                                        ; { %23 | %0 | %1 | %12 | %30 | - }
	PUSHINT	1                       ; >%49 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %12 | %30 | %49 | - }
	PUSH	s3                      ; { %23 | %0 | %1 | %12 | %30 | %49 | %1 | - }
	CALL	1                       ; >%31 = CALL_1 %49, %1
                                        ; { %23 | %0 | %1 | %12 | %30 | %31 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %12 | - }
	PUSHINT	1                       ; >%50 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %12 | %50 | - }
	XCHG2	s0, s2                  ; { %23 | %0 | %12 | %50 | %1 | - }
	CALL	1                       ; >%32 = CALL_1 %50, %1
                                        ; { %23 | %0 | %12 | %32 | - }
	PUSH	s3                      ; { %23 | %0 | %12 | %32 | %23 | - }
	ADDCONST	64              ; >%33 = ADDCONST %23, 64
                                        ; { %23 | %0 | %12 | %32 | %33 | - }
	SWAP                            ; { %23 | %0 | %12 | %33 | %32 | - }
	CALL	$:store$                ; { %23 | %0 | %12 | - }
	PUSHINT	256                     ; >%51 = CONST_I64 256
                                        ; { %23 | %0 | %12 | %51 | - }
	SWAP                            ; { %23 | %0 | %51 | %12 | - }
	CALL	1                       ; >%34 = CALL_1 %51, %12
                                        ; { %23 | %0 | %34 | - }
	XCHG	s0, s2                  ; { %34 | %0 | %23 | - }
	ADDCONST	72              ; >%35 = ADDCONST %23, 72
                                        ; { %34 | %0 | %35 | - }
	XCHG2	s0, s2                  ; { %0 | %35 | %34 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end61:
	.size	Deserialize_Message_ExtOut_int256_Impl, .Lfunc_end61-Deserialize_Message_ExtOut_int256_Impl
                                        ; -- End function
	.globl	Deserialize_Message_ExtOut_int256 ; -- Begin function Deserialize_Message_ExtOut_int256
	.p2align	1
	.type	Deserialize_Message_ExtOut_int256,@function
Deserialize_Message_ExtOut_int256:      ; @Deserialize_Message_ExtOut_int256
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Deserialize_Message_ExtOut_int256_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Deserialize_Message_ExtOut_int256_Impl
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end62:
	.size	Deserialize_Message_ExtOut_int256, .Lfunc_end62-Deserialize_Message_ExtOut_int256
                                        ; -- End function
	.globl	Serialize_Message_ExtOut_common_Impl ; -- Begin function Serialize_Message_ExtOut_common_Impl
	.p2align	1
	.type	Serialize_Message_ExtOut_common_Impl,@function
Serialize_Message_ExtOut_common_Impl:   ; @Serialize_Message_ExtOut_common_Impl
; %bb.0:                                ; %entry
                                        ; { %1 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %1 | %0 | - }
	PUSH	s1                      ; { %1 | %0 | %1 | - }
	CALL	$:load$                 ; >%2 = CALL_LOAD %1
                                        ; { %1 | %0 | %2 | - }
	PUSHINT	$tonstdlib_work_slice_store_uint$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_uint
                                        ; { %1 | %0 | %2 | %3 | - }
	PUSHINT	2                       ; >%28 = CONST_I64 2
                                        ; { %1 | %0 | %2 | %3 | %28 | - }
	XC2PU	s2, s0, s2              ; { %1 | %0 | %3 | %2 | %28 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	1                       ; >%29 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %29 | - }
	PUSHINT	1                       ; >%30 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %29 | %30 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %29 | %30 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSHINT	0                       ; >%31 = CONST_I64 0
                                        ; { %1 | %0 | %3 | %31 | - }
	PUSHINT	1                       ; >%32 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %31 | %32 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %31 | %32 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	8               ; >%7 = ADDCONST %1, 8
                                        ; { %1 | %0 | %3 | %7 | - }
	CALL	$:load$                 ; >%8 = CALL_LOAD %7
                                        ; { %1 | %0 | %3 | %8 | - }
	PUSHINT	1                       ; >%33 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %8 | %33 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %8 | %33 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	16              ; >%9 = ADDCONST %1, 16
                                        ; { %1 | %0 | %3 | %9 | - }
	CALL	$:load$                 ; >%10 = CALL_LOAD %9
                                        ; { %1 | %0 | %3 | %10 | - }
	PUSHINT	$tonstdlib_work_slice_store_int$
	                                ; >%11 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_store_int
                                        ; { %1 | %0 | %3 | %10 | %11 | - }
	PUSHINT	8                       ; >%34 = CONST_I64 8
                                        ; { %1 | %0 | %3 | %10 | %11 | %34 | - }
	SWAP                            ; { %1 | %0 | %3 | %10 | %34 | %11 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	24              ; >%13 = ADDCONST %1, 24
                                        ; { %1 | %0 | %3 | %13 | - }
	CALL	$:load$                 ; >%14 = CALL_LOAD %13
                                        ; { %1 | %0 | %3 | %14 | - }
	PUSHINT	256                     ; >%35 = CONST_I64 256
                                        ; { %1 | %0 | %3 | %14 | %35 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %14 | %35 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	32              ; >%16 = ADDCONST %1, 32
                                        ; { %1 | %0 | %3 | %16 | - }
	CALL	$:load$                 ; >%17 = CALL_LOAD %16
                                        ; { %1 | %0 | %3 | %17 | - }
	PUSHINT	2                       ; >%36 = CONST_I64 2
                                        ; { %1 | %0 | %3 | %17 | %36 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %17 | %36 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	40              ; >%18 = ADDCONST %1, 40
                                        ; { %1 | %0 | %3 | %18 | - }
	CALL	$:load$                 ; >%19 = CALL_LOAD %18
                                        ; { %1 | %0 | %3 | %19 | - }
	PUSHINT	64                      ; >%37 = CONST_I64 64
                                        ; { %1 | %0 | %3 | %19 | %37 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %19 | %37 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	48              ; >%21 = ADDCONST %1, 48
                                        ; { %1 | %0 | %3 | %21 | - }
	CALL	$:load$                 ; >%22 = CALL_LOAD %21
                                        ; { %1 | %0 | %3 | %22 | - }
	PUSHINT	32                      ; >%38 = CONST_I64 32
                                        ; { %1 | %0 | %3 | %22 | %38 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %22 | %38 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %1 | - }
	ADDCONST	56              ; >%24 = ADDCONST %1, 56
                                        ; { %1 | %0 | %3 | %24 | - }
	CALL	$:load$                 ; >%25 = CALL_LOAD %24
                                        ; { %1 | %0 | %3 | %25 | - }
	PUSHINT	1                       ; >%39 = CONST_I64 1
                                        ; { %1 | %0 | %3 | %25 | %39 | - }
	PUSH	s2                      ; { %1 | %0 | %3 | %25 | %39 | %3 | - }
	CALL	1                       ; { %1 | %0 | %3 | - }
	XCHG	s0, s2                  ; { %3 | %0 | %1 | - }
	ADDCONST	64              ; >%26 = ADDCONST %1, 64
                                        ; { %3 | %0 | %26 | - }
	CALL	$:load$                 ; >%27 = CALL_LOAD %26
                                        ; { %3 | %0 | %27 | - }
	PUSHINT	1                       ; >%40 = CONST_I64 1
                                        ; { %3 | %0 | %27 | %40 | - }
	XCHG3	s1, s0, s3              ; { %0 | %27 | %40 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end63:
	.size	Serialize_Message_ExtOut_common_Impl, .Lfunc_end63-Serialize_Message_ExtOut_common_Impl
                                        ; -- End function
	.globl	Serialize_Message_ExtOut_common ; -- Begin function Serialize_Message_ExtOut_common
	.p2align	1
	.type	Serialize_Message_ExtOut_common,@function
Serialize_Message_ExtOut_common:        ; @Serialize_Message_ExtOut_common
; %bb.0:                                ; %entry
                                        ; { %3 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %3 | %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %3 | %0 | %1 | - }
	CALL	1                       ; { %3 | %0 | - }
	PUSHINT	$Serialize_Message_ExtOut_common_Impl$
	                                ; >%2 = PUSH_GLOBAL_ADDRESS @Serialize_Message_ExtOut_common_Impl
                                        ; { %3 | %0 | %2 | - }
	XCHG	s1, s2                  ; { %0 | %3 | %2 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end64:
	.size	Serialize_Message_ExtOut_common, .Lfunc_end64-Serialize_Message_ExtOut_common
                                        ; -- End function
	.globl	Deserialize_Message_ExtOut_common_Impl ; -- Begin function Deserialize_Message_ExtOut_common_Impl
	.p2align	1
	.type	Deserialize_Message_ExtOut_common_Impl,@function
Deserialize_Message_ExtOut_common_Impl: ; @Deserialize_Message_ExtOut_common_Impl
; %bb.0:                                ; %entry
                                        ; { %23 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %23 | %0 | - }
	PUSHINT	$tonstdlib_work_slice_load_uint$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_uint
                                        ; { %23 | %0 | %1 | - }
	PUSHINT	2                       ; >%34 = CONST_I64 2
                                        ; { %23 | %0 | %1 | %34 | - }
	PUSH	s1                      ; { %23 | %0 | %1 | %34 | %1 | - }
	CALL	1                       ; >%3 = CALL_1 %34, %1
                                        ; { %23 | %0 | %1 | %3 | - }
	PUSHINT	1                       ; >%35 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %35 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %3 | %35 | %1 | - }
	CALL	1                       ; >%5 = CALL_1 %35, %1
                                        ; { %23 | %0 | %1 | %3 | %5 | - }
	PUSHINT	1                       ; >%36 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %5 | %36 | - }
	NEQ                             ; >%6 = NE %5, %36
                                        ; { %23 | %0 | %1 | %3 | %6 | - }
	PUSHINT	1                       ; >%37 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %6 | %37 | - }
	AND                             ; >%7 = AND %6, %37
                                        ; { %23 | %0 | %1 | %3 | %7 | - }
	THROWIF	59                      ; { %23 | %0 | %1 | %3 | - }
	PUSHINT	1                       ; >%38 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %38 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %3 | %38 | %1 | - }
	CALL	1                       ; >%9 = CALL_1 %38, %1
                                        ; { %23 | %0 | %1 | %3 | %9 | - }
	PUSHINT	0                       ; >%39 = CONST_I64 0
                                        ; { %23 | %0 | %1 | %3 | %9 | %39 | - }
	NEQ                             ; >%10 = NE %9, %39
                                        ; { %23 | %0 | %1 | %3 | %10 | - }
	PUSHINT	1                       ; >%40 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %10 | %40 | - }
	AND                             ; >%11 = AND %10, %40
                                        ; { %23 | %0 | %1 | %3 | %11 | - }
	THROWIF	59                      ; { %23 | %0 | %1 | %3 | - }
	PUSHINT	$tonstdlib_work_slice_load_int$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @tonstdlib_work_slice_load_int
                                        ; { %23 | %0 | %1 | %3 | %12 | - }
	PUSHINT	1                       ; >%41 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %3 | %12 | %41 | - }
	PUSH	s3                      ; { %23 | %0 | %1 | %3 | %12 | %41 | %1 | - }
	CALL	1                       ; >%14 = CALL_1 %41, %1
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | - }
	PUSHINT	8                       ; >%42 = CONST_I64 8
                                        ; { %23 | %0 | %1 | %3 | %12 | %14 | %42 | - }
	XCHG2	s0, s2                  ; { %23 | %0 | %1 | %3 | %14 | %42 | %12 | - }
	CALL	1                       ; >%15 = CALL_1 %42, %12
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | - }
	PUSHINT	256                     ; >%43 = CONST_I64 256
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %43 | - }
	PUSH	s4                      ; { %23 | %0 | %1 | %3 | %14 | %15 | %43 | %1 | - }
	CALL	1                       ; >%17 = CALL_1 %43, %1
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | - }
	PUSHINT	2                       ; >%44 = CONST_I64 2
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %44 | - }
	PUSH	s5                      ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %44 | %1 | - }
	CALL	1                       ; >%18 = CALL_1 %44, %1
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | - }
	PUSHINT	64                      ; >%45 = CONST_I64 64
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %45 | - }
	PUSH	s6                      ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %45 | %1 | - }
	CALL	1                       ; >%20 = CALL_1 %45, %1
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %20 | - }
	PUSHINT	32                      ; >%46 = CONST_I64 32
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %20 | %46 | - }
	PUSH	s7                      ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %20 | %46 | %1 | - }
	CALL	1                       ; >%22 = CALL_1 %46, %1
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %20 | %22 | - }
	PUSH	s9                      ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %20 | %22 | %23 | - }
	ADDCONST	8               ; >%24 = ADDCONST %23, 8
                                        ; { %23 | %0 | %1 | %3 | %14 | %15 | %17 | %18 | %20 | %22 | %24 | - }
	XCHG2	s0, s6                  ; { %23 | %0 | %1 | %3 | %22 | %15 | %17 | %18 | %20 | %24 | %14 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %22 | %15 | %17 | %18 | %20 | - }
	PUSH	s8                      ; { %23 | %0 | %1 | %3 | %22 | %15 | %17 | %18 | %20 | %23 | - }
	ADDCONST	16              ; >%25 = ADDCONST %23, 16
                                        ; { %23 | %0 | %1 | %3 | %22 | %15 | %17 | %18 | %20 | %25 | - }
	XCHG2	s0, s4                  ; { %23 | %0 | %1 | %3 | %22 | %20 | %17 | %18 | %25 | %15 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %22 | %20 | %17 | %18 | - }
	PUSH	s7                      ; { %23 | %0 | %1 | %3 | %22 | %20 | %17 | %18 | %23 | - }
	ADDCONST	24              ; >%26 = ADDCONST %23, 24
                                        ; { %23 | %0 | %1 | %3 | %22 | %20 | %17 | %18 | %26 | - }
	XCHG2	s0, s2                  ; { %23 | %0 | %1 | %3 | %22 | %20 | %18 | %26 | %17 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %22 | %20 | %18 | - }
	PUSH	s6                      ; { %23 | %0 | %1 | %3 | %22 | %20 | %18 | %23 | - }
	ADDCONST	32              ; >%27 = ADDCONST %23, 32
                                        ; { %23 | %0 | %1 | %3 | %22 | %20 | %18 | %27 | - }
	SWAP                            ; { %23 | %0 | %1 | %3 | %22 | %20 | %27 | %18 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %22 | %20 | - }
	PUSH	s5                      ; { %23 | %0 | %1 | %3 | %22 | %20 | %23 | - }
	ADDCONST	40              ; >%28 = ADDCONST %23, 40
                                        ; { %23 | %0 | %1 | %3 | %22 | %20 | %28 | - }
	SWAP                            ; { %23 | %0 | %1 | %3 | %22 | %28 | %20 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | %22 | - }
	PUSH	s4                      ; { %23 | %0 | %1 | %3 | %22 | %23 | - }
	ADDCONST	48              ; >%29 = ADDCONST %23, 48
                                        ; { %23 | %0 | %1 | %3 | %22 | %29 | - }
	SWAP                            ; { %23 | %0 | %1 | %3 | %29 | %22 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | %3 | - }
	PUSH	s3                      ; { %23 | %0 | %1 | %3 | %23 | - }
	SWAP                            ; { %23 | %0 | %1 | %23 | %3 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %23 | - }
	ADDCONST	56              ; >%30 = ADDCONST %23, 56
                                        ; { %23 | %0 | %1 | %30 | - }
	PUSHINT	1                       ; >%47 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %30 | %47 | - }
	PUSH	s2                      ; { %23 | %0 | %1 | %30 | %47 | %1 | - }
	CALL	1                       ; >%31 = CALL_1 %47, %1
                                        ; { %23 | %0 | %1 | %30 | %31 | - }
	CALL	$:store$                ; { %23 | %0 | %1 | - }
	PUSHINT	1                       ; >%48 = CONST_I64 1
                                        ; { %23 | %0 | %1 | %48 | - }
	SWAP                            ; { %23 | %0 | %48 | %1 | - }
	CALL	1                       ; >%32 = CALL_1 %48, %1
                                        ; { %23 | %0 | %32 | - }
	XCHG	s0, s2                  ; { %32 | %0 | %23 | - }
	ADDCONST	64              ; >%33 = ADDCONST %23, 64
                                        ; { %32 | %0 | %33 | - }
	XCHG2	s0, s2                  ; { %0 | %33 | %32 | - }
	CALL	$:store$                ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end65:
	.size	Deserialize_Message_ExtOut_common_Impl, .Lfunc_end65-Deserialize_Message_ExtOut_common_Impl
                                        ; -- End function
	.globl	Deserialize_Message_ExtOut_common ; -- Begin function Deserialize_Message_ExtOut_common
	.p2align	1
	.type	Deserialize_Message_ExtOut_common,@function
Deserialize_Message_ExtOut_common:      ; @Deserialize_Message_ExtOut_common
; %bb.0:                                ; %entry
                                        ; { %2 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %2 | %0 | - }
	PUSHINT	$Deserialize_Message_ExtOut_common_Impl$
	                                ; >%1 = PUSH_GLOBAL_ADDRESS @Deserialize_Message_ExtOut_common_Impl
                                        ; { %2 | %0 | %1 | - }
	XCHG	s1, s2                  ; { %0 | %2 | %1 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%3 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %3 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
                                        ; fallthrough return
.Lfunc_end66:
	.size	Deserialize_Message_ExtOut_common, .Lfunc_end66-Deserialize_Message_ExtOut_common
                                        ; -- End function
	.globl	build_external_output_int256_message ; -- Begin function build_external_output_int256_message
	.p2align	1
	.type	build_external_output_int256_message,@function
build_external_output_int256_message:   ; @build_external_output_int256_message
; %bb.0:                                ; %entry
                                        ; { %12 | - }
	PUSHINT	80                      ; >%41 = CONST_I64 80
                                        ; { %12 | %41 | - }
	CALL	$:enter$                ; { %12 | - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %12 | %0 | - }
	PUSHINT	0                       ; >%42 = CONST_I64 0
                                        ; { %12 | %0 | %42 | - }
	CALL	$:frameidx$             ; >%20 = CALL_FRAMEIDX %42
                                        ; { %12 | %0 | %20 | - }
	ADDCONST	16              ; >%2 = ADDCONST %20, 16
                                        ; { %12 | %0 | %2 | - }
	PUSHINT	-1                      ; >%43 = CONST_I64 -1
                                        ; { %12 | %0 | %2 | %43 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%44 = CONST_I64 0
                                        ; { %12 | %0 | %44 | - }
	CALL	$:frameidx$             ; >%22 = CALL_FRAMEIDX %44
                                        ; { %12 | %0 | %22 | - }
	ADDCONST	24              ; >%4 = ADDCONST %22, 24
                                        ; { %12 | %0 | %4 | - }
	PUSHINT	1                       ; >%45 = CONST_I64 1
                                        ; { %12 | %0 | %4 | %45 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%46 = CONST_I64 0
                                        ; { %12 | %0 | %46 | - }
	CALL	$:frameidx$             ; >%24 = CALL_FRAMEIDX %46
                                        ; { %12 | %0 | %24 | - }
	ADDCONST	8               ; >%6 = ADDCONST %24, 8
                                        ; { %12 | %0 | %6 | - }
	PUSHINT	0                       ; >%47 = CONST_I64 0
                                        ; { %12 | %0 | %6 | %47 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%48 = CONST_I64 0
                                        ; { %12 | %0 | %48 | - }
	CALL	$:frameidx$             ; >%26 = CALL_FRAMEIDX %48
                                        ; { %12 | %0 | %26 | - }
	ADDCONST	64              ; >%7 = ADDCONST %26, 64
                                        ; { %12 | %0 | %7 | - }
	PUSHINT	0                       ; >%49 = CONST_I64 0
                                        ; { %12 | %0 | %7 | %49 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%50 = CONST_I64 0
                                        ; { %12 | %0 | %50 | - }
	CALL	$:frameidx$             ; >%28 = CALL_FRAMEIDX %50
                                        ; { %12 | %0 | %28 | - }
	ADDCONST	56              ; >%8 = ADDCONST %28, 56
                                        ; { %12 | %0 | %8 | - }
	PUSHINT	0                       ; >%51 = CONST_I64 0
                                        ; { %12 | %0 | %8 | %51 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%52 = CONST_I64 0
                                        ; { %12 | %0 | %52 | - }
	CALL	$:frameidx$             ; >%30 = CALL_FRAMEIDX %52
                                        ; { %12 | %0 | %30 | - }
	ADDCONST	48              ; >%9 = ADDCONST %30, 48
                                        ; { %12 | %0 | %9 | - }
	PUSHINT	0                       ; >%53 = CONST_I64 0
                                        ; { %12 | %0 | %9 | %53 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%54 = CONST_I64 0
                                        ; { %12 | %0 | %54 | - }
	CALL	$:frameidx$             ; >%32 = CALL_FRAMEIDX %54
                                        ; { %12 | %0 | %32 | - }
	ADDCONST	40              ; >%10 = ADDCONST %32, 40
                                        ; { %12 | %0 | %10 | - }
	PUSHINT	0                       ; >%55 = CONST_I64 0
                                        ; { %12 | %0 | %10 | %55 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%56 = CONST_I64 0
                                        ; { %12 | %0 | %56 | - }
	CALL	$:frameidx$             ; >%34 = CALL_FRAMEIDX %56
                                        ; { %12 | %0 | %34 | - }
	ADDCONST	32              ; >%11 = ADDCONST %34, 32
                                        ; { %12 | %0 | %11 | - }
	PUSHINT	0                       ; >%57 = CONST_I64 0
                                        ; { %12 | %0 | %11 | %57 | - }
	CALL	$:store$                ; { %12 | %0 | - }
	PUSHINT	0                       ; >%58 = CONST_I64 0
                                        ; { %12 | %0 | %58 | - }
	CALL	$:frameidx$             ; >%36 = CALL_FRAMEIDX %58
                                        ; { %12 | %0 | %36 | - }
	ADDCONST	72              ; >%13 = ADDCONST %36, 72
                                        ; { %12 | %0 | %13 | - }
	XCHG2	s0, s2                  ; { %0 | %13 | %12 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%59 = CONST_I64 0
                                        ; { %0 | %59 | - }
	CALL	$:frameidx$             ; >%38 = CALL_FRAMEIDX %59
                                        ; { %0 | %38 | - }
	PUSHINT	3                       ; >%60 = CONST_I64 3
                                        ; { %0 | %38 | %60 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%15 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %15 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$Serialize_Message_ExtOut_int256_Impl$
	                                ; >%16 = PUSH_GLOBAL_ADDRESS @Serialize_Message_ExtOut_int256_Impl
                                        ; { %0 | %16 | - }
	PUSHINT	0                       ; >%61 = CONST_I64 0
                                        ; { %0 | %16 | %61 | - }
	CALL	$:frameidx$             ; >%40 = CALL_FRAMEIDX %61
                                        ; { %0 | %16 | %40 | - }
	SWAP                            ; { %0 | %40 | %16 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
	PUSHINT	80                      ; >%62 = CONST_I64 80
                                        ; { %62 | - }
	CALL	$:leave$                ; { - }
                                        ; fallthrough return
.Lfunc_end67:
	.size	build_external_output_int256_message, .Lfunc_end67-build_external_output_int256_message
                                        ; -- End function
	.globl	build_external_output_common_message_header ; -- Begin function build_external_output_common_message_header
	.p2align	1
	.type	build_external_output_common_message_header,@function
build_external_output_common_message_header: ; @build_external_output_common_message_header
; %bb.0:                                ; %entry
                                        ; { - }
	PUSHINT	72                      ; >%36 = CONST_I64 72
                                        ; { %36 | - }
	CALL	$:enter$                ; { - }
	PUSH	c0                      ; >%0 = PUSHC 0
                                        ; { %0 | - }
	PUSHINT	0                       ; >%37 = CONST_I64 0
                                        ; { %0 | %37 | - }
	CALL	$:frameidx$             ; >%17 = CALL_FRAMEIDX %37
                                        ; { %0 | %17 | - }
	ADDCONST	24              ; >%2 = ADDCONST %17, 24
                                        ; { %0 | %2 | - }
	PUSHINT	1                       ; >%38 = CONST_I64 1
                                        ; { %0 | %2 | %38 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%39 = CONST_I64 0
                                        ; { %0 | %39 | - }
	CALL	$:frameidx$             ; >%19 = CALL_FRAMEIDX %39
                                        ; { %0 | %19 | - }
	ADDCONST	16              ; >%4 = ADDCONST %19, 16
                                        ; { %0 | %4 | - }
	PUSHINT	0                       ; >%40 = CONST_I64 0
                                        ; { %0 | %4 | %40 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%41 = CONST_I64 0
                                        ; { %0 | %41 | - }
	CALL	$:frameidx$             ; >%21 = CALL_FRAMEIDX %41
                                        ; { %0 | %21 | - }
	ADDCONST	8               ; >%5 = ADDCONST %21, 8
                                        ; { %0 | %5 | - }
	PUSHINT	0                       ; >%42 = CONST_I64 0
                                        ; { %0 | %5 | %42 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%43 = CONST_I64 0
                                        ; { %0 | %43 | - }
	CALL	$:frameidx$             ; >%23 = CALL_FRAMEIDX %43
                                        ; { %0 | %23 | - }
	ADDCONST	64              ; >%6 = ADDCONST %23, 64
                                        ; { %0 | %6 | - }
	PUSHINT	0                       ; >%44 = CONST_I64 0
                                        ; { %0 | %6 | %44 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%45 = CONST_I64 0
                                        ; { %0 | %45 | - }
	CALL	$:frameidx$             ; >%25 = CALL_FRAMEIDX %45
                                        ; { %0 | %25 | - }
	ADDCONST	56              ; >%7 = ADDCONST %25, 56
                                        ; { %0 | %7 | - }
	PUSHINT	0                       ; >%46 = CONST_I64 0
                                        ; { %0 | %7 | %46 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%47 = CONST_I64 0
                                        ; { %0 | %47 | - }
	CALL	$:frameidx$             ; >%27 = CALL_FRAMEIDX %47
                                        ; { %0 | %27 | - }
	ADDCONST	48              ; >%8 = ADDCONST %27, 48
                                        ; { %0 | %8 | - }
	PUSHINT	0                       ; >%48 = CONST_I64 0
                                        ; { %0 | %8 | %48 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%49 = CONST_I64 0
                                        ; { %0 | %49 | - }
	CALL	$:frameidx$             ; >%29 = CALL_FRAMEIDX %49
                                        ; { %0 | %29 | - }
	ADDCONST	40              ; >%9 = ADDCONST %29, 40
                                        ; { %0 | %9 | - }
	PUSHINT	0                       ; >%50 = CONST_I64 0
                                        ; { %0 | %9 | %50 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%51 = CONST_I64 0
                                        ; { %0 | %51 | - }
	CALL	$:frameidx$             ; >%31 = CALL_FRAMEIDX %51
                                        ; { %0 | %31 | - }
	ADDCONST	32              ; >%10 = ADDCONST %31, 32
                                        ; { %0 | %10 | - }
	PUSHINT	0                       ; >%52 = CONST_I64 0
                                        ; { %0 | %10 | %52 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	0                       ; >%53 = CONST_I64 0
                                        ; { %0 | %53 | - }
	CALL	$:frameidx$             ; >%33 = CALL_FRAMEIDX %53
                                        ; { %0 | %33 | - }
	PUSHINT	3                       ; >%54 = CONST_I64 3
                                        ; { %0 | %33 | %54 | - }
	CALL	$:store$                ; { %0 | - }
	PUSHINT	$tonstdlib_create_empty_work_slice$
	                                ; >%12 = PUSH_GLOBAL_ADDRESS @tonstdlib_create_empty_work_slice
                                        ; { %0 | %12 | - }
	CALL	1                       ; { %0 | - }
	PUSHINT	$Serialize_Message_ExtOut_common_Impl$
	                                ; >%13 = PUSH_GLOBAL_ADDRESS @Serialize_Message_ExtOut_common_Impl
                                        ; { %0 | %13 | - }
	PUSHINT	0                       ; >%55 = CONST_I64 0
                                        ; { %0 | %13 | %55 | - }
	CALL	$:frameidx$             ; >%35 = CALL_FRAMEIDX %55
                                        ; { %0 | %13 | %35 | - }
	SWAP                            ; { %0 | %35 | %13 | - }
	CALL	1                       ; { %0 | - }
	POP	c0                      ; { - }
	PUSHINT	72                      ; >%56 = CONST_I64 72
                                        ; { %56 | - }
	CALL	$:leave$                ; { - }
                                        ; fallthrough return
.Lfunc_end68:
	.size	build_external_output_common_message_header, .Lfunc_end68-build_external_output_common_message_header
                                        ; -- End function
	.type	target_persistent,@object ; @target_persistent
	.data
	.globl	target_persistent
	.p2align	3
target_persistent:
	.quad	10000000                ; 0x989680
	.size	target_persistent, 8


	.ident	"clang version 7.0.0 "
	.section	".note.GNU-stack","",@progbits
