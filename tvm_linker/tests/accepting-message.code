	.globl	main

	; Stack: ...; body slice; selector --

	; 1. Checking selector
	; Stack: ...; body slice; selector --
	DUP
	IFNOTRET
	INC 
	THROWIF 32

	; 2. Checking message body
	; Stack: ...; body slice 
	LDUQ 32		; Stack: ...; [message data]; body slice; ? 
	POP S1		; Stack: ...; [message data]; ?

	; Check, whether there are 32 bits of data in the message body
	PUSHCONT {
		; If not, this is the initial message; we need to
		; accept it only once
		; Stack: ...

		; Read root data
		PUSHROOT
		CTOS
		LDU 32
		DROP

		; Stack: ...; root data
		; If root data = 0, then accept initial message
		PUSHCONT {
			ACCEPT

			; Mark that we passed initial acceptance message
			; Write 1723 to root
			PUSHINT 1723

			NEWC
			STU 32
			ENDC
			POPROOT
		}
		IFNOTJMP

		; If root data != 0, then skip -- this message was already
		; accepted
	}
	IFNOTJMP

	; There are 32 bits in the message body: normal message. 
	; However, did we accept this message earlier?
	; Stack: ...; message data
	PUSHROOT
	CTOS
	LDU 32
	DROP

	; Stack: ...; message data; root data
	EQUAL
	THROWIFNOT 34

	; message data = root data: accept, this is a new message
	ACCEPT

	; Increment counter in root data, so this message is never accepted again
	PUSHROOT
	CTOS
	LDU 32
	DROP

	INC

	NEWC
	STU 32
	ENDC
	POPROOT

	; Essential for initial message
	.data
	00000000
